============================================
vis/result.rtx
19:19:02_Tuesday_30_June_2020
============================================
Feedback:
Your programs ("EthicalEngine.java" ) have been submitted successfully. 
Compiling your programs with "javac"...
============================================
Here are our Junit tests for you:
++Initializing Tests
Test: enumeration <AgeCategory>
Test: enumeration <BodyType>
Test: enumeration <Gender>
Test: enumeration <Profession>
Test: abstract class <Character>
Test: class <Person>
Test: class <Animal>
Test: class <Scenario>
Test: class <ScenarioGenerator>
Test: enumeration <Decision>
Test: class <EthicalEngine>
Test: class <Audit>
toStringMethod(TestAudit): erroneous line 4 expected:<- % SAVED AFTER [100] RUNS> but was:<- % SAVED AFTER [99] RUNS>
--finished testing. Result:
1 errors found. :(
Your programs have been compiled successfully :-)
Now, it's your responsibility to test your programs for correctness!
Here are some public test cases, and the results:
============================================
Test for input file: public Test1
Expected results:                                                       Your results:
                   __-------__						                   __-------__
                 / _---------_ \					                 / _---------_ \
                / /           \ \					                / /           \ \
                | |           | |					                | |           | |
                |_|___________|_|					                |_|___________|_|
            /-\|                 |/-\					            /-\|                 |/-\
           | _ |\       0       /| _ |					           | _ |\       0       /| _ |
           |(_)| \      !      / |(_)|					           |(_)| \      !      / |(_)|
           |___|__\_____!_____/__|___|					           |___|__\_____!_____/__|___|
           [_______|COMP90041|_______] 					           [_______|COMP90041|_______] 
            ||||    ~~~~~~~~~    ||||					            ||||    ~~~~~~~~~    ||||
            `--'                 `--'					            `--'                 `--'

    $$\      $$\                              $$\                   	    $$\      $$\                              $$\                   
    $$$\    $$$ |                             $$ |                  	    $$$\    $$$ |                             $$ |                  
    $$$$\  $$$$ | $$$$$$\   $$$$$$\  $$$$$$\  $$ |                  	    $$$$\  $$$$ | $$$$$$\   $$$$$$\  $$$$$$\  $$ |                  
    $$\$$\$$ $$ |$$  __$$\ $$  __$$\ \____$$\ $$ |                  	    $$\$$\$$ $$ |$$  __$$\ $$  __$$\ \____$$\ $$ |                  
    $$ \$$$  $$ |$$ /  $$ |$$ |  \__|$$$$$$$ |$$ |                  	    $$ \$$$  $$ |$$ /  $$ |$$ |  \__|$$$$$$$ |$$ |                  
    $$ |\$  /$$ |$$ |  $$ |$$ |     $$  __$$ |$$ |                  	    $$ |\$  /$$ |$$ |  $$ |$$ |     $$  __$$ |$$ |                  
    $$ | \_/ $$ |\$$$$$$  |$$ |     \$$$$$$$ |$$ |                  	    $$ | \_/ $$ |\$$$$$$  |$$ |     \$$$$$$$ |$$ |                  
    \__|     \__| \______/ \__|      \_______|\__|                  	    \__|     \__| \______/ \__|      \_______|\__|                  
    $$\      $$\                     $$\       $$\                  	    $$\      $$\                     $$\       $$\                  
    $$$\    $$$ |                    $$ |      \__|                 	    $$$\    $$$ |                    $$ |      \__|                 
    $$$$\  $$$$ | $$$$$$\   $$$$$$$\ $$$$$$$\  $$\ $$$$$$$\   $$$$$$	    $$$$\  $$$$ | $$$$$$\   $$$$$$$\ $$$$$$$\  $$\ $$$$$$$\   $$$$$$
    $$\$$\$$ $$ | \____$$\ $$  _____|$$  __$$\ $$ |$$  __$$\ $$  __$	    $$\$$\$$ $$ | \____$$\ $$  _____|$$  __$$\ $$ |$$  __$$\ $$  __$
    $$ \$$$  $$ | $$$$$$$ |$$ /      $$ |  $$ |$$ |$$ |  $$ |$$$$$$$	    $$ \$$$  $$ | $$$$$$$ |$$ /      $$ |  $$ |$$ |$$ |  $$ |$$$$$$$
    $$ |\$  /$$ |$$  __$$ |$$ |      $$ |  $$ |$$ |$$ |  $$ |$$   __	    $$ |\$  /$$ |$$  __$$ |$$ |      $$ |  $$ |$$ |$$ |  $$ |$$   __
    $$ | \_/ $$ |\$$$$$$$ |\$$$$$$$\ $$ |  $$ |$$ |$$ |  $$ |\$$$$$$	    $$ | \_/ $$ |\$$$$$$$ |\$$$$$$$\ $$ |  $$ |$$ |$$ |  $$ |\$$$$$$
    \__|     \__| \_______| \_______|\__|  \__|\__|\__|  \__| \_____	    \__|     \__| \_______| \_______|\__|  \__|\__|\__|  \__| \_____


Welcome to Moral Machines! 						Welcome to Moral Machines! 
    									    
The idea of Moral Machines is based on the Trolley Dilemma, a fictio	The idea of Moral Machines is based on the Trolley Dilemma, a fictio

The answers are not straightforward. There are a number of variables	The answers are not straightforward. There are a number of variables
Do you consent to have your decisions saved to a file? (yes/no)		Do you consent to have your decisions saved to a file? (yes/no)
======================================					======================================
# Scenario								# Scenario
======================================					======================================
Legal Crossing: yes							Legal Crossing: yes
Passengers (3)								Passengers (3)
- average adult doctor female						- average adult doctor female
- overweight adult unknown male						- overweight adult unknown male
- average baby female							- average baby female
Pedestrians (4)								Pedestrians (4)
- average senior male							- average senior male
- average adult ceo female pregnant					- average adult ceo female pregnant
- athletic child male							- athletic child male
- dog is pet								- dog is pet
Who should be saved? (passenger(s) [1] or pedestrian(s) [2])		Who should be saved? (passenger(s) [1] or pedestrian(s) [2])
======================================					======================================
# Scenario								# Scenario
======================================					======================================
Legal Crossing: no							Legal Crossing: no
Passengers (2)								Passengers (2)
- average adult unknown female pregnant					- average adult unknown female pregnant
- athletic adult criminal male						- athletic adult criminal male
Pedestrians (4)								Pedestrians (4)
- cat is pet								- cat is pet
- bird									- bird
- athletic adult doctor female						- athletic adult doctor female
- average baby male							- average baby male
Who should be saved? (passenger(s) [1] or pedestrian(s) [2])		Who should be saved? (passenger(s) [1] or pedestrian(s) [2])
======================================					======================================
# Scenario								# Scenario
======================================					======================================
Legal Crossing: no							Legal Crossing: no
Passengers (1)								Passengers (1)
- overweight senior male						- overweight senior male
Pedestrians (5)								Pedestrians (5)
- athletic child female							- athletic child female
- athletic child male							- athletic child male
- athletic child female							- athletic child female
- athletic child female							- athletic child female
- athletic child male							- athletic child male
Who should be saved? (passenger(s) [1] or pedestrian(s) [2])		Who should be saved? (passenger(s) [1] or pedestrian(s) [2])
======================================					======================================
# User Audit								# User Audit
======================================					======================================
- % SAVED AFTER 3 RUNS							- % SAVED AFTER 3 RUNS
ceo: 1.0								ceo: 1.0
child: 1.0							     <
criminal: 1.0								criminal: 1.0
dog: 1.0							     <
pregnant: 1.0								pregnant: 1.0
								     >	dog: 1.0
								     >	child: 1.0
athletic: 0.8								athletic: 0.8
female: 0.6								female: 0.6
male: 0.6							     <
person: 0.6								person: 0.6
adult: 0.5							     |	male: 0.6
average: 0.5							     |	red: 0.5
green: 0.5								green: 0.5
								     >	average: 0.5
								     >	unknown: 0.5
pet: 0.5								pet: 0.5
red: 0.5							     <
senior: 0.5								senior: 0.5
unknown: 0.5							     |	adult: 0.5
animal: 0.3								animal: 0.3
baby: 0.0							     <
bird: 0.0							     <
cat: 0.0								cat: 0.0
doctor: 0.0							     |	bird: 0.0
overweight: 0.0								overweight: 0.0
								     >	unemployed: 0.0
								     >	you: 0.0
								     >	homeless: 0.0
								     >	doctor: 0.0
								     >	baby: 0.0
								     >	ferret: 0.0
--									--
average age: 24.6							average age: 24.6
That's all. Press Enter to quit.					That's all. Press Enter to quit.
Oops, your results seem to be INCORRECT :-(
============================================
Test for input file: public Test2
Expected results:                                                       Your results:
                   __-------__						                   __-------__
                 / _---------_ \					                 / _---------_ \
                / /           \ \					                / /           \ \
                | |           | |					                | |           | |
                |_|___________|_|					                |_|___________|_|
            /-\|                 |/-\					            /-\|                 |/-\
           | _ |\       0       /| _ |					           | _ |\       0       /| _ |
           |(_)| \      !      / |(_)|					           |(_)| \      !      / |(_)|
           |___|__\_____!_____/__|___|					           |___|__\_____!_____/__|___|
           [_______|COMP90041|_______] 					           [_______|COMP90041|_______] 
            ||||    ~~~~~~~~~    ||||					            ||||    ~~~~~~~~~    ||||
            `--'                 `--'					            `--'                 `--'

    $$\      $$\                              $$\                   	    $$\      $$\                              $$\                   
    $$$\    $$$ |                             $$ |                  	    $$$\    $$$ |                             $$ |                  
    $$$$\  $$$$ | $$$$$$\   $$$$$$\  $$$$$$\  $$ |                  	    $$$$\  $$$$ | $$$$$$\   $$$$$$\  $$$$$$\  $$ |                  
    $$\$$\$$ $$ |$$  __$$\ $$  __$$\ \____$$\ $$ |                  	    $$\$$\$$ $$ |$$  __$$\ $$  __$$\ \____$$\ $$ |                  
    $$ \$$$  $$ |$$ /  $$ |$$ |  \__|$$$$$$$ |$$ |                  	    $$ \$$$  $$ |$$ /  $$ |$$ |  \__|$$$$$$$ |$$ |                  
    $$ |\$  /$$ |$$ |  $$ |$$ |     $$  __$$ |$$ |                  	    $$ |\$  /$$ |$$ |  $$ |$$ |     $$  __$$ |$$ |                  
    $$ | \_/ $$ |\$$$$$$  |$$ |     \$$$$$$$ |$$ |                  	    $$ | \_/ $$ |\$$$$$$  |$$ |     \$$$$$$$ |$$ |                  
    \__|     \__| \______/ \__|      \_______|\__|                  	    \__|     \__| \______/ \__|      \_______|\__|                  
    $$\      $$\                     $$\       $$\                  	    $$\      $$\                     $$\       $$\                  
    $$$\    $$$ |                    $$ |      \__|                 	    $$$\    $$$ |                    $$ |      \__|                 
    $$$$\  $$$$ | $$$$$$\   $$$$$$$\ $$$$$$$\  $$\ $$$$$$$\   $$$$$$	    $$$$\  $$$$ | $$$$$$\   $$$$$$$\ $$$$$$$\  $$\ $$$$$$$\   $$$$$$
    $$\$$\$$ $$ | \____$$\ $$  _____|$$  __$$\ $$ |$$  __$$\ $$  __$	    $$\$$\$$ $$ | \____$$\ $$  _____|$$  __$$\ $$ |$$  __$$\ $$  __$
    $$ \$$$  $$ | $$$$$$$ |$$ /      $$ |  $$ |$$ |$$ |  $$ |$$$$$$$	    $$ \$$$  $$ | $$$$$$$ |$$ /      $$ |  $$ |$$ |$$ |  $$ |$$$$$$$
    $$ |\$  /$$ |$$  __$$ |$$ |      $$ |  $$ |$$ |$$ |  $$ |$$   __	    $$ |\$  /$$ |$$  __$$ |$$ |      $$ |  $$ |$$ |$$ |  $$ |$$   __
    $$ | \_/ $$ |\$$$$$$$ |\$$$$$$$\ $$ |  $$ |$$ |$$ |  $$ |\$$$$$$	    $$ | \_/ $$ |\$$$$$$$ |\$$$$$$$\ $$ |  $$ |$$ |$$ |  $$ |\$$$$$$
    \__|     \__| \_______| \_______|\__|  \__|\__|\__|  \__| \_____	    \__|     \__| \_______| \_______|\__|  \__|\__|\__|  \__| \_____


Welcome to Moral Machines! 						Welcome to Moral Machines! 
    									    
The idea of Moral Machines is based on the Trolley Dilemma, a fictio	The idea of Moral Machines is based on the Trolley Dilemma, a fictio

The answers are not straightforward. There are a number of variables	The answers are not straightforward. There are a number of variables
Do you consent to have your decisions saved to a file? (yes/no)		Do you consent to have your decisions saved to a file? (yes/no)
======================================					======================================
# Scenario								# Scenario
======================================					======================================
Legal Crossing: yes							Legal Crossing: yes
Passengers (2)								Passengers (2)
- cat									- cat
- average senior male							- average senior male
Pedestrians (4)								Pedestrians (4)
- cat									- cat
- average adult homeless male						- average adult homeless male
- average adult homeless male						- average adult homeless male
- average adult homeless female pregnant				- average adult homeless female pregnant
Who should be saved? (passenger(s) [1] or pedestrian(s) [2])		Who should be saved? (passenger(s) [1] or pedestrian(s) [2])
======================================					======================================
# Scenario								# Scenario
======================================					======================================
Legal Crossing: yes							Legal Crossing: yes
Passengers (1)								Passengers (1)
- average adult criminal male						- average adult criminal male
Pedestrians (5)								Pedestrians (5)
- athletic baby female							- athletic baby female
- cat is pet								- cat is pet
- athletic senior male							- athletic senior male
- average child male							- average child male
- average adult homeless female						- average adult homeless female
Who should be saved? (passenger(s) [1] or pedestrian(s) [2])		Who should be saved? (passenger(s) [1] or pedestrian(s) [2])
======================================					======================================
# Scenario								# Scenario
======================================					======================================
Legal Crossing: yes							Legal Crossing: yes
Passengers (4)								Passengers (4)
- average adult doctor female pregnant					- average adult doctor female pregnant
- ferret								- ferret
- overweight senior female						- overweight senior female
- athletic senior male							- athletic senior male
Pedestrians (4)								Pedestrians (4)
- athletic adult doctor male						- athletic adult doctor male
- athletic child male							- athletic child male
- overweight adult homeless male					- overweight adult homeless male
- dog									- dog
Who should be saved? (passenger(s) [1] or pedestrian(s) [2])		Who should be saved? (passenger(s) [1] or pedestrian(s) [2])
======================================					======================================
# User Audit								# User Audit
======================================					======================================
- % SAVED AFTER 3 RUNS							- % SAVED AFTER 3 RUNS
baby: 1.0							     <
ferret: 1.0							     <
pet: 1.0								pet: 1.0
senior: 1.0								senior: 1.0
								     >	baby: 1.0
								     >	ferret: 1.0
female: 0.8								female: 0.8
								     >	cat: 0.6
animal: 0.6								animal: 0.6
athletic: 0.6								athletic: 0.6
cat: 0.6							     <
average: 0.5							     <
child: 0.5							     <
doctor: 0.5							     <
green: 0.5								green: 0.5
overweight: 0.5							     <
person: 0.5								person: 0.5
								     >	average: 0.5
								     >	overweight: 0.5
pregnant: 0.5								pregnant: 0.5
								     >	doctor: 0.5
								     >	child: 0.5
male: 0.4								male: 0.4
adult: 0.2								adult: 0.2
homeless: 0.2								homeless: 0.2
								     >	ceo: 0.0
								     >	unknown: 0.0
								     >	red: 0.0
								     >	bird: 0.0
criminal: 0.0								criminal: 0.0
								     >	unemployed: 0.0
								     >	you: 0.0
dog: 0.0								dog: 0.0
--									--
average age: 55.5							average age: 55.5
Would you like to continue? (yes/no)					Would you like to continue? (yes/no)
======================================					======================================
# Scenario								# Scenario
======================================					======================================
Legal Crossing: no							Legal Crossing: no
Passengers (3)								Passengers (3)
- you average adult homeless male					- you average adult homeless male
- overweight adult homeless female					- overweight adult homeless female
- average adult ceo male						- average adult ceo male
Pedestrians (3)								Pedestrians (3)
- athletic adult unknown female						- athletic adult unknown female
- average adult criminal female						- average adult criminal female
- athletic adult unemployed female pregnant				- athletic adult unemployed female pregnant
Who should be saved? (passenger(s) [1] or pedestrian(s) [2])		Who should be saved? (passenger(s) [1] or pedestrian(s) [2])
======================================					======================================
# Scenario								# Scenario
======================================					======================================
Legal Crossing: yes							Legal Crossing: yes
Passengers (4)								Passengers (4)
- athletic adult ceo female pregnant					- athletic adult ceo female pregnant
- overweight adult doctor female					- overweight adult doctor female
- average senior male							- average senior male
- athletic adult ceo female pregnant					- athletic adult ceo female pregnant
Pedestrians (4)								Pedestrians (4)
- athletic adult homeless female					- athletic adult homeless female
- average adult homeless male						- average adult homeless male
- average child male							- average child male
- overweight adult unknown male						- overweight adult unknown male
Who should be saved? (passenger(s) [1] or pedestrian(s) [2])		Who should be saved? (passenger(s) [1] or pedestrian(s) [2])
======================================					======================================
# Scenario								# Scenario
======================================					======================================
Legal Crossing: yes							Legal Crossing: yes
Passengers (1)								Passengers (1)
- you average senior female						- you average senior female
Pedestrians (4)								Pedestrians (4)
- athletic adult criminal female pregnant				- athletic adult criminal female pregnant
- overweight adult unknown female pregnant				- overweight adult unknown female pregnant
- overweight adult homeless male					- overweight adult homeless male
- average senior female							- average senior female
Who should be saved? (passenger(s) [1] or pedestrian(s) [2])		Who should be saved? (passenger(s) [1] or pedestrian(s) [2])
======================================					======================================
# User Audit								# User Audit
======================================					======================================
- % SAVED AFTER 6 RUNS							- % SAVED AFTER 6 RUNS
								     >	unemployed: 1.0
								     >	pet: 1.0
baby: 1.0								baby: 1.0
ferret: 1.0								ferret: 1.0
pet: 1.0							     <
unemployed: 1.0							     <
senior: 0.7								senior: 0.7
animal: 0.6							     |	unknown: 0.6
cat: 0.6								cat: 0.6
child: 0.6								child: 0.6
unknown: 0.6							     |	animal: 0.6
athletic: 0.5								athletic: 0.5
average: 0.5							     <
female: 0.5								female: 0.5
								     >	average: 0.5
red: 0.5								red: 0.5
you: 0.5								you: 0.5
green: 0.4								green: 0.4
male: 0.4							     <
person: 0.4								person: 0.4
								     >	male: 0.4
adult: 0.3								adult: 0.3
criminal: 0.3								criminal: 0.3
doctor: 0.3								doctor: 0.3
homeless: 0.3								homeless: 0.3
overweight: 0.2								overweight: 0.2
pregnant: 0.2								pregnant: 0.2
ceo: 0.0								ceo: 0.0
								     >	bird: 0.0
dog: 0.0								dog: 0.0
--									--
average age: 46.7							average age: 46.7
Would you like to continue? (yes/no)					Would you like to continue? (yes/no)
======================================					======================================
# Scenario								# Scenario
======================================					======================================
Legal Crossing: no							Legal Crossing: no
Passengers (5)								Passengers (5)
- athletic adult unemployed female pregnant				- athletic adult unemployed female pregnant
- athletic adult doctor female pregnant					- athletic adult doctor female pregnant
- ferret								- ferret
- ferret								- ferret
- ferret is pet								- ferret is pet
Pedestrians (1)								Pedestrians (1)
- athletic senior female						- athletic senior female
Who should be saved? (passenger(s) [1] or pedestrian(s) [2])		Who should be saved? (passenger(s) [1] or pedestrian(s) [2])
======================================					======================================
# Scenario								# Scenario
======================================					======================================
Legal Crossing: yes							Legal Crossing: yes
Passengers (4)								Passengers (4)
- athletic senior male							- athletic senior male
- ferret is pet								- ferret is pet
- average adult criminal female						- average adult criminal female
- overweight adult unemployed female pregnant				- overweight adult unemployed female pregnant
Pedestrians (5)								Pedestrians (5)
- athletic adult ceo male						- athletic adult ceo male
- athletic adult unemployed female pregnant				- athletic adult unemployed female pregnant
- ferret								- ferret
- average adult homeless male						- average adult homeless male
- overweight baby male							- overweight baby male
Who should be saved? (passenger(s) [1] or pedestrian(s) [2])		Who should be saved? (passenger(s) [1] or pedestrian(s) [2])
======================================					======================================
# Scenario								# Scenario
======================================					======================================
Legal Crossing: yes							Legal Crossing: yes
Passengers (2)								Passengers (2)
- athletic adult unknown female						- athletic adult unknown female
- overweight senior male						- overweight senior male
Pedestrians (2)								Pedestrians (2)
- average adult unknown male						- average adult unknown male
- overweight adult homeless female					- overweight adult homeless female
Who should be saved? (passenger(s) [1] or pedestrian(s) [2])		Who should be saved? (passenger(s) [1] or pedestrian(s) [2])
======================================					======================================
# User Audit								# User Audit
======================================					======================================
- % SAVED AFTER 9 RUNS							- % SAVED AFTER 9 RUNS
pet: 1.0								pet: 1.0
ferret: 0.8								ferret: 0.8
animal: 0.7							     <
unemployed: 0.7								unemployed: 0.7
								     >	animal: 0.7
								     >	red: 0.6
cat: 0.6								cat: 0.6
child: 0.6								child: 0.6
red: 0.6							     <
senior: 0.6							     <
unknown: 0.6								unknown: 0.6
athletic: 0.5							     |	senior: 0.6
								     >	female: 0.5
average: 0.5								average: 0.5
baby: 0.5							     <
criminal: 0.5								criminal: 0.5
doctor: 0.5							     <
female: 0.5							     <
you: 0.5								you: 0.5
adult: 0.4							     |	doctor: 0.5
green: 0.4							     |	baby: 0.5
								     >	athletic: 0.5
person: 0.4								person: 0.4
								     >	green: 0.4
pregnant: 0.4								pregnant: 0.4
homeless: 0.3							     |	adult: 0.4
male: 0.3								male: 0.3
overweight: 0.3								overweight: 0.3
								     >	homeless: 0.3
ceo: 0.0								ceo: 0.0
								     >	bird: 0.0
dog: 0.0								dog: 0.0
--									--
average age: 44.7							average age: 44.7
Would you like to continue? (yes/no)					Would you like to continue? (yes/no)
======================================					======================================
# Scenario								# Scenario
======================================					======================================
Legal Crossing: yes							Legal Crossing: yes
Passengers (3)								Passengers (3)
- dog									- dog
- athletic senior male							- athletic senior male
- average senior male							- average senior male
Pedestrians (4)								Pedestrians (4)
- you overweight child female						- you overweight child female
- average adult unemployed male						- average adult unemployed male
- average adult ceo female						- average adult ceo female
- average senior male							- average senior male
Who should be saved? (passenger(s) [1] or pedestrian(s) [2])		Who should be saved? (passenger(s) [1] or pedestrian(s) [2])
======================================					======================================
# User Audit								# User Audit
======================================					======================================
- % SAVED AFTER 10 RUNS							- % SAVED AFTER 10 RUNS
pet: 1.0								pet: 1.0
ferret: 0.8								ferret: 0.8
animal: 0.7								animal: 0.7
cat: 0.6							     <
red: 0.6								red: 0.6
								     >	cat: 0.6
senior: 0.6								senior: 0.6
unemployed: 0.6							     <
unknown: 0.6								unknown: 0.6
								     >	unemployed: 0.6
athletic: 0.5								athletic: 0.5
baby: 0.5							     |	female: 0.5
child: 0.5							     <
criminal: 0.5								criminal: 0.5
doctor: 0.5								doctor: 0.5
								     >	baby: 0.5
dog: 0.5								dog: 0.5
female: 0.5							     |	child: 0.5
adult: 0.4							     <
average: 0.4								average: 0.4
green: 0.4								green: 0.4
male: 0.4							     <
person: 0.4								person: 0.4
pregnant: 0.4								pregnant: 0.4
homeless: 0.3							     |	male: 0.4
								     >	adult: 0.4
overweight: 0.3								overweight: 0.3
you: 0.3								you: 0.3
								     >	homeless: 0.3
ceo: 0.0								ceo: 0.0
								     >	bird: 0.0
--									--
average age: 48.4							average age: 48.4
That's all. Press Enter to quit.					That's all. Press Enter to quit.
Oops, your results seem to be INCORRECT :-(
============================================
Test for input file: public Test3
Expected results:                                                       Your results:
WARNING: invalid data format in config file in line 3		     <
WARNING: invalid data format in config file in line 22		     <
                   __-------__						                   __-------__
                 / _---------_ \					                 / _---------_ \
                / /           \ \					                / /           \ \
                | |           | |					                | |           | |
                |_|___________|_|					                |_|___________|_|
            /-\|                 |/-\					            /-\|                 |/-\
           | _ |\       0       /| _ |					           | _ |\       0       /| _ |
           |(_)| \      !      / |(_)|					           |(_)| \      !      / |(_)|
           |___|__\_____!_____/__|___|					           |___|__\_____!_____/__|___|
           [_______|COMP90041|_______] 					           [_______|COMP90041|_______] 
            ||||    ~~~~~~~~~    ||||					            ||||    ~~~~~~~~~    ||||
            `--'                 `--'					            `--'                 `--'

    $$\      $$\                              $$\                   	    $$\      $$\                              $$\                   
    $$$\    $$$ |                             $$ |                  	    $$$\    $$$ |                             $$ |                  
    $$$$\  $$$$ | $$$$$$\   $$$$$$\  $$$$$$\  $$ |                  	    $$$$\  $$$$ | $$$$$$\   $$$$$$\  $$$$$$\  $$ |                  
    $$\$$\$$ $$ |$$  __$$\ $$  __$$\ \____$$\ $$ |                  	    $$\$$\$$ $$ |$$  __$$\ $$  __$$\ \____$$\ $$ |                  
    $$ \$$$  $$ |$$ /  $$ |$$ |  \__|$$$$$$$ |$$ |                  	    $$ \$$$  $$ |$$ /  $$ |$$ |  \__|$$$$$$$ |$$ |                  
    $$ |\$  /$$ |$$ |  $$ |$$ |     $$  __$$ |$$ |                  	    $$ |\$  /$$ |$$ |  $$ |$$ |     $$  __$$ |$$ |                  
    $$ | \_/ $$ |\$$$$$$  |$$ |     \$$$$$$$ |$$ |                  	    $$ | \_/ $$ |\$$$$$$  |$$ |     \$$$$$$$ |$$ |                  
    \__|     \__| \______/ \__|      \_______|\__|                  	    \__|     \__| \______/ \__|      \_______|\__|                  
    $$\      $$\                     $$\       $$\                  	    $$\      $$\                     $$\       $$\                  
    $$$\    $$$ |                    $$ |      \__|                 	    $$$\    $$$ |                    $$ |      \__|                 
    $$$$\  $$$$ | $$$$$$\   $$$$$$$\ $$$$$$$\  $$\ $$$$$$$\   $$$$$$	    $$$$\  $$$$ | $$$$$$\   $$$$$$$\ $$$$$$$\  $$\ $$$$$$$\   $$$$$$
    $$\$$\$$ $$ | \____$$\ $$  _____|$$  __$$\ $$ |$$  __$$\ $$  __$	    $$\$$\$$ $$ | \____$$\ $$  _____|$$  __$$\ $$ |$$  __$$\ $$  __$
    $$ \$$$  $$ | $$$$$$$ |$$ /      $$ |  $$ |$$ |$$ |  $$ |$$$$$$$	    $$ \$$$  $$ | $$$$$$$ |$$ /      $$ |  $$ |$$ |$$ |  $$ |$$$$$$$
    $$ |\$  /$$ |$$  __$$ |$$ |      $$ |  $$ |$$ |$$ |  $$ |$$   __	    $$ |\$  /$$ |$$  __$$ |$$ |      $$ |  $$ |$$ |$$ |  $$ |$$   __
    $$ | \_/ $$ |\$$$$$$$ |\$$$$$$$\ $$ |  $$ |$$ |$$ |  $$ |\$$$$$$	    $$ | \_/ $$ |\$$$$$$$ |\$$$$$$$\ $$ |  $$ |$$ |$$ |  $$ |\$$$$$$
    \__|     \__| \_______| \_______|\__|  \__|\__|\__|  \__| \_____	    \__|     \__| \_______| \_______|\__|  \__|\__|\__|  \__| \_____


Welcome to Moral Machines! 						Welcome to Moral Machines! 
    									    
The idea of Moral Machines is based on the Trolley Dilemma, a fictio	The idea of Moral Machines is based on the Trolley Dilemma, a fictio

The answers are not straightforward. There are a number of variables	The answers are not straightforward. There are a number of variables
Do you consent to have your decisions saved to a file? (yes/no)		Do you consent to have your decisions saved to a file? (yes/no)
								     >	WARNING: invalid data format in config file in line 2
								     >	WARNING: invalid data format in config file in line 21
======================================					======================================
# Scenario								# Scenario
======================================					======================================
Legal Crossing: yes							Legal Crossing: yes
Passengers (1)								Passengers (1)
- average child male							- average child male
Pedestrians (5)								Pedestrians (5)
- average adult unknown female pregnant					- average adult unknown female pregnant
- overweight adult ceo male						- overweight adult ceo male
- athletic adult unemployed female pregnant				- athletic adult unemployed female pregnant
- average senior female							- average senior female
- athletic adult criminal male						- athletic adult criminal male
Who should be saved? (passenger(s) [1] or pedestrian(s) [2])		Who should be saved? (passenger(s) [1] or pedestrian(s) [2])
======================================					======================================
# Scenario								# Scenario
======================================					======================================
Legal Crossing: no							Legal Crossing: no
Passengers (1)								Passengers (1)
- overweight adult doctor male						- overweight adult doctor male
Pedestrians (6)								Pedestrians (6)
- you overweight adult homeless female pregnant				- you overweight adult homeless female pregnant
- athletic child female							- athletic child female
- overweight baby male							- overweight baby male
- overweight senior male						- overweight senior male
- overweight adult ceo female pregnant					- overweight adult ceo female pregnant
- dog is pet								- dog is pet
Who should be saved? (passenger(s) [1] or pedestrian(s) [2])		Who should be saved? (passenger(s) [1] or pedestrian(s) [2])
======================================					======================================
# Scenario								# Scenario
======================================					======================================
Legal Crossing: yes							Legal Crossing: yes
Passengers (4)								Passengers (4)
- you overweight senior male						- you overweight senior male
- overweight adult doctor female pregnant				- overweight adult doctor female pregnant
- average adult homeless female pregnant				- average adult homeless female pregnant
- ferret is pet								- ferret is pet
Pedestrians (6)								Pedestrians (6)
- dog is pet								- dog is pet
- cat is pet								- cat is pet
- athletic child male							- athletic child male
- average adult criminal female pregnant				- average adult criminal female pregnant
- athletic adult homeless female pregnant				- athletic adult homeless female pregnant
- overweight adult unknown female					- overweight adult unknown female
Who should be saved? (passenger(s) [1] or pedestrian(s) [2])		Who should be saved? (passenger(s) [1] or pedestrian(s) [2])
======================================					======================================
# User Audit								# User Audit
======================================					======================================
- % SAVED AFTER 3 RUNS							- % SAVED AFTER 3 RUNS
cat: 1.0								cat: 1.0
child: 0.6								child: 0.6
animal: 0.5							     |	unknown: 0.5
criminal: 0.5								criminal: 0.5
								     >	pet: 0.5
doctor: 0.5								doctor: 0.5
								     >	animal: 0.5
dog: 0.5								dog: 0.5
pet: 0.5							     <
unknown: 0.5							     <
athletic: 0.4							     <
average: 0.4							     <
green: 0.4								green: 0.4
adult: 0.3							     |	average: 0.4
homeless: 0.3							     |	athletic: 0.4
male: 0.3								male: 0.3
								     >	homeless: 0.3
								     >	adult: 0.3
person: 0.3								person: 0.3
female: 0.2								female: 0.2
overweight: 0.2							     <
pregnant: 0.2								pregnant: 0.2
								     >	overweight: 0.2
red: 0.1								red: 0.1
baby: 0.0							     <
ceo: 0.0								ceo: 0.0
ferret: 0.0							     |	bird: 0.0
senior: 0.0							     <
unemployed: 0.0								unemployed: 0.0
you: 0.0								you: 0.0
								     >	senior: 0.0
								     >	baby: 0.0
								     >	ferret: 0.0
--									--
average age: 41.0							average age: 41.0
Would you like to continue? (yes/no)					Would you like to continue? (yes/no)
======================================					======================================
# Scenario								# Scenario
======================================					======================================
Legal Crossing: no							Legal Crossing: no
Passengers (1)								Passengers (1)
- average senior male							- average senior male
Pedestrians (3)								Pedestrians (3)
- athletic adult doctor female pregnant					- athletic adult doctor female pregnant
- ferret is pet								- ferret is pet
- athletic senior male							- athletic senior male
Who should be saved? (passenger(s) [1] or pedestrian(s) [2])		Who should be saved? (passenger(s) [1] or pedestrian(s) [2])
======================================					======================================
# Scenario								# Scenario
======================================					======================================
Legal Crossing: no							Legal Crossing: no
Passengers (5)								Passengers (5)
- ferret								- ferret
- athletic child male							- athletic child male
- overweight adult ceo female						- overweight adult ceo female
- average adult doctor female						- average adult doctor female
- average child female							- average child female
Pedestrians (4)								Pedestrians (4)
- ferret								- ferret
- you athletic adult unknown male					- you athletic adult unknown male
- athletic child male							- athletic child male
- average senior male							- average senior male
Who should be saved? (passenger(s) [1] or pedestrian(s) [2])		Who should be saved? (passenger(s) [1] or pedestrian(s) [2])
======================================					======================================
# Scenario								# Scenario
======================================					======================================
Legal Crossing: yes							Legal Crossing: yes
Passengers (1)								Passengers (1)
- overweight senior female						- overweight senior female
Pedestrians (4)								Pedestrians (4)
- average baby female							- average baby female
- average adult ceo female						- average adult ceo female
- athletic senior male							- athletic senior male
- average senior male							- average senior male
Who should be saved? (passenger(s) [1] or pedestrian(s) [2])		Who should be saved? (passenger(s) [1] or pedestrian(s) [2])
======================================					======================================
# User Audit								# User Audit
======================================					======================================
- % SAVED AFTER 6 RUNS							- % SAVED AFTER 6 RUNS
cat: 1.0								cat: 1.0
doctor: 0.7								doctor: 0.7
child: 0.6								child: 0.6
pet: 0.6								pet: 0.6
								     >	average: 0.5
animal: 0.5								animal: 0.5
athletic: 0.5								athletic: 0.5
average: 0.5							     |	green: 0.5
baby: 0.5							     <
ceo: 0.5								ceo: 0.5
criminal: 0.5								criminal: 0.5
dog: 0.5							     <
female: 0.5								female: 0.5
								     >	baby: 0.5
								     >	dog: 0.5
ferret: 0.5								ferret: 0.5
green: 0.5							     <
adult: 0.4							     <
male: 0.4							     <
person: 0.4								person: 0.4
								     >	adult: 0.4
red: 0.4								red: 0.4
homeless: 0.3							     |	male: 0.4
								     >	unknown: 0.3
pregnant: 0.3								pregnant: 0.3
								     >	homeless: 0.3
senior: 0.3								senior: 0.3
unknown: 0.3							     <
overweight: 0.2								overweight: 0.2
								     >	bird: 0.0
unemployed: 0.0								unemployed: 0.0
you: 0.0								you: 0.0
--									--
average age: 43.8							average age: 43.8
Would you like to continue? (yes/no)					Would you like to continue? (yes/no)
======================================					======================================
# Scenario								# Scenario
======================================					======================================
Legal Crossing: no							Legal Crossing: no
Passengers (2)								Passengers (2)
- overweight adult unemployed female pregnant				- overweight adult unemployed female pregnant
- overweight adult unknown male						- overweight adult unknown male
Pedestrians (7)								Pedestrians (7)
- dog									- dog
- average adult criminal female pregnant				- average adult criminal female pregnant
- average adult criminal male						- average adult criminal male
- athletic senior male							- athletic senior male
- average senior female							- average senior female
- overweight adult unknown female pregnant				- overweight adult unknown female pregnant
- average adult unemployed male						- average adult unemployed male
Who should be saved? (passenger(s) [1] or pedestrian(s) [2])		Who should be saved? (passenger(s) [1] or pedestrian(s) [2])
======================================					======================================
# Scenario								# Scenario
======================================					======================================
Legal Crossing: no							Legal Crossing: no
Passengers (7)								Passengers (7)
- overweight adult ceo male						- overweight adult ceo male
- ferret is pet								- ferret is pet
- average senior male							- average senior male
- average adult doctor female pregnant					- average adult doctor female pregnant
- dog									- dog
- athletic adult ceo female pregnant					- athletic adult ceo female pregnant
- average adult homeless female						- average adult homeless female
Pedestrians (4)								Pedestrians (4)
- ferret is pet								- ferret is pet
- dog is pet								- dog is pet
- athletic adult unemployed female					- athletic adult unemployed female
- dog									- dog
Who should be saved? (passenger(s) [1] or pedestrian(s) [2])		Who should be saved? (passenger(s) [1] or pedestrian(s) [2])
======================================					======================================
# Scenario								# Scenario
======================================					======================================
Legal Crossing: no							Legal Crossing: no
Passengers (3)								Passengers (3)
- cat is pet								- cat is pet
- ferret is pet								- ferret is pet
- athletic senior male							- athletic senior male
Pedestrians (4)								Pedestrians (4)
- overweight adult unknown female					- overweight adult unknown female
- average child male							- average child male
- athletic senior male							- athletic senior male
- average adult ceo male						- average adult ceo male
Who should be saved? (passenger(s) [1] or pedestrian(s) [2])		Who should be saved? (passenger(s) [1] or pedestrian(s) [2])
======================================					======================================
# User Audit								# User Audit
======================================					======================================
- % SAVED AFTER 9 RUNS							- % SAVED AFTER 9 RUNS
cat: 1.0								cat: 1.0
criminal: 0.7								criminal: 0.7
pet: 0.7								pet: 0.7
animal: 0.6								animal: 0.6
doctor: 0.6							     <
dog: 0.6								dog: 0.6
								     >	doctor: 0.6
								     >	ferret: 0.5
								     >	child: 0.5
athletic: 0.5								athletic: 0.5
average: 0.5								average: 0.5
baby: 0.5							     <
child: 0.5							     <
ferret: 0.5							     <
green: 0.5								green: 0.5
unemployed: 0.5								unemployed: 0.5
adult: 0.4							     |	baby: 0.5
								     >	red: 0.4
female: 0.4								female: 0.4
male: 0.4							     <
person: 0.4								person: 0.4
red: 0.4							     |	adult: 0.4
senior: 0.4								senior: 0.4
								     >	male: 0.4
pregnant: 0.3								pregnant: 0.3
unknown: 0.3								unknown: 0.3
ceo: 0.2								ceo: 0.2
homeless: 0.2							     <
overweight: 0.2								overweight: 0.2
								     >	homeless: 0.2
								     >	bird: 0.0
you: 0.0								you: 0.0
--									--
average age: 47.7							average age: 47.7
Would you like to continue? (yes/no)					Would you like to continue? (yes/no)
======================================					======================================
# Scenario								# Scenario
======================================					======================================
Legal Crossing: yes							Legal Crossing: yes
Passengers (3)								Passengers (3)
- dog									- dog
- cat is pet								- cat is pet
- overweight adult ceo female						- overweight adult ceo female
Pedestrians (4)								Pedestrians (4)
- dog is pet								- dog is pet
- overweight senior female						- overweight senior female
- average senior female							- average senior female
- athletic adult doctor female pregnant					- athletic adult doctor female pregnant
Who should be saved? (passenger(s) [1] or pedestrian(s) [2])		Who should be saved? (passenger(s) [1] or pedestrian(s) [2])
======================================					======================================
# User Audit								# User Audit
======================================					======================================
- % SAVED AFTER 10 RUNS							- % SAVED AFTER 10 RUNS
cat: 1.0								cat: 1.0
criminal: 0.7								criminal: 0.7
								     >	pet: 0.6
animal: 0.6								animal: 0.6
dog: 0.6								dog: 0.6
pet: 0.6							     |	ferret: 0.5
								     >	child: 0.5
athletic: 0.5								athletic: 0.5
average: 0.5								average: 0.5
baby: 0.5							     <
child: 0.5							     <
doctor: 0.5							     <
ferret: 0.5							     <
green: 0.5							     <
unemployed: 0.5								unemployed: 0.5
adult: 0.4							     |	green: 0.5
								     >	doctor: 0.5
								     >	baby: 0.5
								     >	red: 0.4
female: 0.4								female: 0.4
male: 0.4							     <
person: 0.4								person: 0.4
red: 0.4							     |	adult: 0.4
								     >	male: 0.4
ceo: 0.3								ceo: 0.3
pregnant: 0.3							     <
senior: 0.3								senior: 0.3
unknown: 0.3								unknown: 0.3
homeless: 0.2							     |	pregnant: 0.3
overweight: 0.2								overweight: 0.2
								     >	homeless: 0.2
								     >	bird: 0.0
you: 0.0								you: 0.0
--									--
average age: 47.8							average age: 47.8
That's all. Press Enter to quit.					That's all. Press Enter to quit.
Oops, your results seem to be INCORRECT :-(
============================================
src/Scenario.java
19:13:49_Tuesday_30_June_2020
============================================
/** 
 * name: Yuqing Chang
 * student number: 1044862
 * username: yuqchang
 */
package ethicalengine;

/**
 * Define the variables and basic methods of the scene
 * @author Yuqing Chang
 *
 */
public class Scenario {
	// Attributes of a Scenario object
	private boolean isLegalCrossing;
	private boolean hasYouInCar;
	private boolean hasYouInLane;
	private Character[] passenger;
	private Character[] pedestrian;

	/**
	 * Constructor of Scenario class
	 * @param passengers {@code Character[]} is an array of passengers
	 * @param pedestrians {@code Character[]} is an array of pedestrians
	 * @param isLegalCrossing {@code boolean} is {@code true} if pedestrians are crossing road legally
	 */
	public Scenario(Character[] passengers, Character[] pedestrians, boolean isLegalCrossing) {
		this.passenger = passengers;
		this.pedestrian = pedestrians;
		this.isLegalCrossing = isLegalCrossing;
		for (int i = 0; i < passenger.length; i++) {
			if (passenger[i].getClass() == Person.class) {
				if (((Person) passenger[i]).isYou() == true) {
					hasYouInCar = true;
					hasYouInLane = false;
				} else {
					hasYouInCar = false;
				}
			}
		}
		for (int i = 0; i < pedestrian.length; i++) {
			if (pedestrian[i].getClass() == Person.class) {
				if (((Person) pedestrian[i]).isYou() == true) {
					hasYouInCar = false;
					hasYouInLane = true;
				} else {
					hasYouInLane = false;
				}
			}
		}
	}

	/**
	 * Get information about whether you're in car
	 * @return {@code boolean} is {@code true} if you are in car
	 */
	public boolean hasYouInCar() {
		return this.hasYouInCar;
	}

	/**
	 * Get information about whether you're in lane
	 * @return {@code boolean} is {@code true} if you are in lane
	 */
	public boolean hasYouInLane() {
		return this.hasYouInLane;
	}

	/**
	 * Set information about whether you're in car
	 * @param car {@code boolean} is {@code true} if you are in car
	 */
	public void setYouInCar(boolean car) {
		this.hasYouInCar = car;
	}

	/**
	 * Set information about whether you're in lane
	 * @param lane {@code boolean} is {@code true} if you are in lane
	 */
	public void setYouInLane(boolean lane) {
		this.hasYouInLane = lane;
	}

	/**
	 * Get an array of passengers
	 * @return {@code Character[]} is an array of passengers
	 */
	public Character[] getPassengers() {
		return passenger;
	}

	/**
	 * Get an array of pedestrian
	 * @return {@code Character[]} is an array of pedestrians
	 */
	public Character[] getPedestrians() {
		return pedestrian;
	}

	/**
	 * Get information about whether the person is legally crossing
	 * @return {@code boolean} is {@code true} if pedestrians are crossing road legally
	 */
	public boolean isLegalCrossing() {
		return this.isLegalCrossing;
	}

	/**
	 * Set information about whether the person is legally crossing
	 * @param isLegalCrossing {@code boolean} is {@code true} if pedestrians are crossing road legally
	 */
	public void setLegalCrossing(boolean isLegalCrossing) {
		this.isLegalCrossing = isLegalCrossing;
	}

	/**
	 * Get the number of passengers
	 * @return {@code int} the number of passengers
	 */
	public int getPassengerCount() {
		return this.passenger.length;
	}

	/**
	 * Get the number of pedestrians
	 * @return {@code int} the number of pedestrians
	 */
	public int getPedestrianCount() {
		return this.pedestrian.length;
	}

	/**
	 * Organize Scenario information into a string and return
	 * @return {@code String} to store scenario information
	 */
	public String toString() {
		String legal;
		if (this.isLegalCrossing == true)
			legal = "yes";
		else
			legal = "no";
		String out = "======================================\n";
		out = out + "# Scenario\n";
		out = out + "======================================\n";

		out = out + "Legal Crossing: " + legal + "\n";
		out = out + "Passengers (" + this.getPassengerCount() + ")\n";
		for (int i = 0; i < this.getPassengerCount(); i++) {
			out = out + "- " + this.passenger[i] + "\n";
		}
		out = out + "Pedestrians (" + this.getPedestrianCount() + ")\n";
		for (int i = 0; i < this.getPedestrianCount(); i++) {
			out = out + "- " + this.pedestrian[i] + "\n";
		}
		out = out.substring(0, out.length() - 1);
		return out;
	}
}
============================================
src/ScenarioGenerator.java
19:13:49_Tuesday_30_June_2020
============================================
/** 
 * name: Yuqing Chang
 * student number: 1044862
 * username: yuqchang
 */
package ethicalengine;

import java.util.Random;

import ethicalengine.Character.BodyType;
import ethicalengine.Character.Gender;
import ethicalengine.Person.Profession;

/**
 * A generator that randomly generates scenes
 * @author Yuqing Chang
 *
 */
public class ScenarioGenerator {
	// Attributes of a ScenarioGenerator object
	private long seed;					// Seed of a Random object
	private int passengerMin = 0;
	private int passengerMax = 0;
	private int pedestrianMin = 0;
	private int pedestrianMax = 0;

	// Enum object of species
	public enum Species {DOG, CAT, BIRD, FERRET};

	private Random r;					// Random Object

	/**
	 * Constructor of ScenarioGenerator class
	 */
	public ScenarioGenerator() {
		// Random seed generation
		this.seed = System.currentTimeMillis();
		r = new Random(seed);

	}

	/**
	 * Constructor of ScenarioGenerator class
	 * @param seed{{@code long} is a seed of random r
	 */
	public ScenarioGenerator(long seed) {
		this.seed = seed;
		r = new Random(seed);
	}

	/**
	 * Constructor of ScenarioGenerator class
	 * @param seed {{@code long} is a seed of random r
	 * @param passengerCountMinimum {@code int} is the number of minimum passengers
	 * @param passengerCountMaximum {@code int} is the number of maximum passengers
	 * @param pedestrianCountMinimum {@code int} is the number of minimum pedestrians
	 * @param pedestrianCountMaximum {@code int} is the number of maximum pedestrians
	 */
	public ScenarioGenerator(long seed, int passengerCountMinimum, int passengerCountMaximum,
			int pedestrianCountMinimum, int pedestrianCountMaximum) {
		this.seed = seed;
		this.passengerMin = passengerCountMinimum;
		this.passengerMax = passengerCountMaximum;
		this.pedestrianMin = pedestrianCountMinimum;
		this.pedestrianMax = pedestrianCountMaximum;
	}

	/**
	 * Set the number of minimum passengers
	 * @param min {@code int} is the number of minimum passengers
	 */
	public void setPassengerCountMin(int min) {
		this.passengerMin = min;
	}

	/**
	 * Set the number of maximum passengers
	 * @param max {@code int} is the number of maximum passengers
	 */
	public void setPassengerCountMax(int max) {
		this.passengerMax = max;
	}

	/**
	 * Set the number of minimum pedestrians
	 * @param min {@code int} is the number of minimum pedestrians
	 */
	public void setPedestrianCountMin(int min) {
		this.pedestrianMin = min;
	}

	/**
	 * Set the number of maximum pedestrians
	 * @param max {@code int} is the number of maximum pedestrians
	 */
	public void setPedestrianCountMax(int max) {
		this.pedestrianMax = max;
	}

	/**
	 * Generate a Person object randomly
	 * @return {@code Person} is a Person object
	 */
	public Person getRandomPerson() {
		// Use pseudo-random numbers to randomly generate each object attribute
		int age = r.nextInt(100);
		int p = r.nextInt(6);
		int g = r.nextInt(3);
		int b = r.nextInt(BodyType.values().length);
		int pre = r.nextInt(2);
		boolean preg;
		if (pre == 0) {
			preg = true;
		} else {
			preg = false;
		}

		Person person = new Person(age, Profession.values()[p], Gender.values()[g], BodyType.values()[b], preg);
		return person;
	}

	/**
	 * Generate an Animal object randomly
	 * @return {@code Animal} is an Animal object
	 */
	public Animal getRandomAnimal() {
		// Use pseudo-random numbers to randomly generate each object attribute
		int age = r.nextInt(100);
		int g = r.nextInt(Gender.values().length);
		int b = r.nextInt(BodyType.values().length);
		int s = r.nextInt(Species.values().length);
		int ispet = r.nextInt(2);
		boolean pet;
		if (ispet == 0) {
			pet = true;
		} else {
			pet = false;
		}
		int pre = r.nextInt(2);
		boolean preg;
		if (pre == 0) {
			preg = true;
		} else {
			preg = false;
		}
		Animal ani = new Animal(Species.values()[s].toString().toLowerCase());
		ani.setAge(age);
		ani.setGender(Gender.values()[g]);
		ani.setBodyType(BodyType.values()[b]);
		ani.setPet(pet);
		ani.setPregnant(preg);
		return ani;
	}

	/**
	 * Generate a scenario object randomly
	 * @return {@code Scenario} is a Scenario object
	 */
	public Scenario generate() {
		if (this.passengerMax == 0) {
			setPassengerCountMax(5);
		}
		if (this.passengerMin == 0) {
			setPassengerCountMin(1);
		}
		if (this.pedestrianMax == 0) {
			setPedestrianCountMax(5);
		}
		if (this.pedestrianMin == 0) {
			setPedestrianCountMin(1);
		}
		int pas = r.nextInt(passengerMax - passengerMin) + passengerMin;
		int ped = r.nextInt(pedestrianMax - pedestrianMin) + pedestrianMin;
		Character passenger[] = new Character[pas];
		Character pedestrian[] = new Character[ped];
		int youPlace = 0;
		for (int i = 0; i < pas; i++) {
			// Set the probability of being a passenger
			int choose = r.nextInt(2);
			if (choose == 0) {
				passenger[i] = getRandomPerson();
				/*
				 * Check if an array has you before
				 */
				if ((checkYou(passenger) == false) && (checkYou(pedestrian) == false)) {
					// There is no one in the passenger
					int you = r.nextInt(2);
					if (you == 0) {
						((Person) passenger[i]).setAsYou(true);
						youPlace = 1;			// You are in the car
					} else {
						((Person) passenger[i]).setAsYou(false);
					}
				}
			} else
				passenger[i] = getRandomAnimal();
		}

		for (int j = 0; j < ped; j++) {
			int choose = r.nextInt(2);
			if (choose == 0) {
				pedestrian[j] = getRandomPerson();
				if ((checkYou(passenger) == false) && (checkYou(pedestrian) == false)) {
					int you = r.nextInt(2);
					if (you == 0) {
						((Person) pedestrian[j]).setAsYou(true);
						youPlace = 2;			// You are in a lane
					} else {
						((Person) pedestrian[j]).setAsYou(false);
					}
				}
			} else
				pedestrian[j] = getRandomAnimal();
		}

		int crossing = r.nextInt(2);
		boolean isLegalCrossing;
		if (crossing == 0) {
			isLegalCrossing = true;
		} else {
			isLegalCrossing = false;
		}
		Scenario scen = new Scenario(passenger, pedestrian, isLegalCrossing);
		if (youPlace == 1) {
			// you are in car
			scen.setYouInCar(true);
			scen.setYouInLane(false);
		} else if (youPlace == 2) {
			// You are on the road
			scen.setYouInLane(true);
			scen.setYouInCar(false);
		} else {
			scen.setYouInLane(false);
			scen.setYouInCar(false);
		}
		return scen;
	}

	/**
	 * Check if you are in the current array
	 * @param array{@code Character[]} is an array of characters
	 * @return {@code boolean} is {@code true} if an array has you
	 */
	public boolean checkYou(Character[] array) {
		if (array == null)
			return false;
		for (int i = 0; i < array.length; i++) {
			try {
				if (array[i].getClass() == Person.class) {
					if (((Person) array[i]).isYou() == true)
						return true;
				}
			} catch (NullPointerException e) {

			}
		}
		return false;
	}
}
============================================
src/InvalidInputException.java
19:13:49_Tuesday_30_June_2020
============================================
/** 
 * name: Yuqing Chang
 * student number: 1044862
 * username: yuqchang
 */
/**
 * Customized exception class to handle invalid input exceptions
 * @author Yuqing Chang
 *
 */
public class InvalidInputException extends Exception {
	/**
	 * Constructor of InvalidInputException class
	 */
	public InvalidInputException() {

	}
}
============================================
src/Audit.java
19:13:49_Tuesday_30_June_2020
============================================
/** 
 * name: Yuqing Chang
 * student number: 1044862
 * username: yuqchang
 */
import ethicalengine.*;
import ethicalengine.Character;
import java.util.Collections;
import java.util.Map.Entry;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.*;
/**
 * Audit the outcome
 * An inspection of your algorithm with the goal of revealing inherent biases
 * @author Yuqing Chang
 *
 */

public class Audit {
	// A ArrayList to store scenarios
	private ArrayList<Scenario> list = new ArrayList<Scenario>();
	// A ArrayList to store decisions
	private ArrayList<String> saves = new ArrayList<String>();
	private String auditType = null;
	private String outs;
	private int runs = 0;
	private double averageAge = 0.0;
	private Scenario[] scenarios = null;
	private int m = 0;
	// The number of showing scenarios
	private final int MAX = 3;
	private final int DIGIT = 10;
	// Current number of scenes that need to be decided
	private int size = 0;

	/**
	 * Constructor of Audit class
	 */
	public Audit() {
		auditType = "Unspecified";
		this.runs = MAX;
	}
	
	/**
	 * Constructor of Audit class
	 * @param scenarios{{@code Scenario[]}is an array to store scenarios
	 */
	public Audit(Scenario[] scenarios) {
		this.scenarios = scenarios;
		//this.runs = scenarios.length;
		for (int i = 0; i < scenarios.length; i++) {
			list.add(scenarios[i]);
		}
	}

	/**
	 * Set the type of audit
	 * 
	 * @param name {{@code String} is type of audit
	 */
	public void setAuditType(String name) {
		this.auditType = name;
	}

	/**
	 * Get the type of audit
	 * 
	 * @return {@code String} 
	 */
	public String getAuditType() {
		if (this.auditType == null) {
			this.auditType = "Unspecified";
		}
		return this.auditType;
	}

	/**
	 * Judging the survivors in each scene in the array
	 */
	public void run() {
		size = scenarios.length;
		for (Scenario s : scenarios) {
			// Judge the scene and decide the survivor
			saves.add(EthicalEngine.decide(s).toString().toLowerCase());
		}
	}

	/**
	 * Randomly generate a specified number of scenes, and judge the survivors in
	 * each scene
	 * 
	 * @param runs the {@code int} to record the number of running times
	 */
	public void run(int runs) {
		size = runs;
		// Automatically generate scenes randomly
		ScenarioGenerator manager = new ScenarioGenerator();
		// Temporary objects of scenarios and survival results
		ArrayList<Scenario> temp = new ArrayList<Scenario>();
		ArrayList<String> savesTemp = new ArrayList<String>();

		/*
		 * Randomly generate a specified number of scenes, decide and store the scenes
		 * and results
		 */
		for (int i = 0; i < runs - 1; i++) {
			Scenario e = manager.generate();
			temp.add(e);
			savesTemp.add(EthicalEngine.decide(e).toString().toLowerCase());// Error Null Pointer
		}

		for (int m = 0; m < temp.size(); m++) {
			list.add(temp.get(m));
			saves.add(savesTemp.get(m));
		}
	}

	/**
	 * In interactive mode, judging the survivors in each scene that read from .csv
	 * Return a boolean value to show this array whether has remaining
	 * 
	 * @return {@code true} if there's remaining scenes 
	 */
	public boolean runUser() {
		int r = scenarios.length;
		int num = 0;
		r = r - m;
		
		/*
		 * Interact with the user until the user has three interactions
		 */
		for (int i = m; i < scenarios.length; i++) {
			if (num < MAX) {
				System.out.println(scenarios[i]);
				System.out.println("Who should be saved? (passenger(s) [1] or pedestrian(s) [2])");
				String ans = EthicalEngine.scan.nextLine();
				if (ans.contentEquals("passenger") || ans.contentEquals("1") || ans.contentEquals("passengers")) {
					num++;
					saves.add("passengers");
					continue;
				}
				if (ans.contentEquals("pedestrian") || ans.contentEquals("2") || ans.contentEquals("pedestrians")) {
					num++;
					saves.add("pedestrians");
					continue;
				}
			} else {
				// Determine whether the current scenes still remain
				if (r - num <= 0)
					return false;
				else {
					m = i;
					return true;
				}
			}
		}
		return false;
	}

	/**
	 * In interactive mode, randomly generate a specified number of scenes and judge
	 * the survivors in each scene Return a boolean value to show this array whether
	 * has remaining
	 * 
	 * @param r the {@code int} to record the number of running times
	 * @return {@code true} if there's remaining scenes 
	 */
	public boolean runUser(int r) {// Print out the scenes one by one
		int num = 0;
		r = r - m;
		size = MAX;
		ScenarioGenerator manager = new ScenarioGenerator();
		
		/*
		 * Randomly generate a specified number of scenes Interact with the user until
		 * the user has three interactions
		 */
		for (int i = m; i < r ; i++) {
			if (num < MAX) {
				Scenario e = manager.generate();

				System.out.println(e);
				System.out.println("Who should be saved? (passenger(s) [1] or pedestrian(s) [2])");
				String ans = EthicalEngine.scan.nextLine();
				if (ans.contentEquals("passenger") || ans.contentEquals("1") || ans.contentEquals("passengers")) {
					num++;
					list.add(e);
					saves.add("passengers");
					continue;
				}
				if (ans.contentEquals("pedestrian") || ans.contentEquals("2") || ans.contentEquals("pedestrians")) {
					num++;
					list.add(e);
					saves.add("pedestrians");
					continue;
				}
			} else {
				if (r - num <= 0)
					return false;
				else {
					m = i;
					return true;
				}
			}
		}
		return false;
	}

	/**
	 * Organize audit information into a string and return
	 * @return {@code String} to store audit information
	 */
	public String toString() {
		this.runs = saves.size();
		String out = "======================================\n";
		out = out + "# " + getAuditType() + " Audit\n";
		out = out + "======================================\n" + "- % SAVED AFTER " + this.runs + " RUNS\n";
		if (saves.size() == 0) {
			return "no audit available";
		}
		Map<String, Double> map = statistic(saves.size());
		// Sort by probability from largest to smallest
		Map<String, Double> hm = sortByValue(map);

		// Print the sorted hashmap
		for (Entry<String, Double> en : hm.entrySet()) {
				out = out + en.getKey() + ": " + ((double)((int)(en.getValue()*DIGIT)))/DIGIT + "\n";
		}
		out = out + "--\n" + "average age: " + ((double)((int)(averageAge*DIGIT)))/DIGIT + "\n";
		return out;
	}

	/**
	 * Print statistic into files in the specified path
	 * 
	 * @throws IOException when can't find files
	 */
	public void printStatistic() throws IOException {
		// Default storage path
		String result = "logs/results.log";
		this.outs = toString();
		System.out.print(outs);
		if (EthicalEngine.consent == true) {
			printToFile("logs/user.log");
			return;
		}
		if (EthicalEngine.outputPath != null)
			result = EthicalEngine.outputPath;
		printToFile(result);
	}

	/**
	 * Print statistic into files
	 * 
	 * @param filepath {@code String} is path of file
	 * @throws IOException when can't find files
	 */
	public void printToFile(String filepath) throws IOException {
		try {
			File fil = new File(filepath);
			if (!fil.exists()) {
				// The file does not exist. Create a new file and write the result
				fil.mkdirs();
				write_data(fil);
			} else {// This file already exists
				write_data(fil);
			}
		} catch (IOException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
	}

	/**
	 * Write all current player data to .log file
	 * 
	 * @param f {@code File} is a file object
	 * @throws IOException when can't find files
	 */
	public void write_data(File f) throws IOException {
		try {
			FileWriter fileWriter = new FileWriter(f.getName(), true);
			BufferedWriter bw = new BufferedWriter(fileWriter);
			String[] str = this.outs.split("\n");// Split by line
			for (int i = 0; i < str.length; i++) {
				/*
				 * Write the information into file;
				 */
				bw.write(str[i] + "\n");

			}
			// Close BufferedWriter
			bw.close();
			fileWriter.close();
			outs = "";
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	/**
	 * Sort hashmap by values as descending order
	 * 
	 * @param hm {@code Map<String, Double>} is a key-value map 
	 * @return {@code HashMap<String, Double>} store key-value pairs as descending order
	 */
	public HashMap<String, Double> sortByValue(Map<String, Double> hm) {
		// Create a list from elements of HashMap
		List<Map.Entry<String, Double>> list = new LinkedList<Map.Entry<String, Double>>(hm.entrySet());

		// Sort the list
		Collections.sort(list, new Comparator<Map.Entry<String, Double>>() {
			public int compare(Map.Entry<String, Double> o1, Map.Entry<String, Double> o2) {
				return (o2.getValue()).compareTo(o1.getValue());
			}
		});

		// put data from sorted list to hashmap
		HashMap<String, Double> temp = new LinkedHashMap<String, Double>();
		for (Map.Entry<String, Double> aa : list) {
			temp.put(aa.getKey(), aa.getValue());
		}
		return temp;
	}

	/**
	 * Calculate probabilities well into key-value pairs
	 * 
	 * @param l {@code int} is the number of scenario
	 * @return {@code Map<String, Double>}
	 */
	public Map<String, Double> statistic(int l) {
		Map<String, Double> map = new HashMap<>();
		// Count each value
		double baby = 0.0;
		double child = 0.0;
		double adult = 0.0;
		double senior = 0.0;
		double female = 0.0;
		double male = 0.0;
		double average = 0.0;
		double athletic = 0.0;
		double overweight = 0.0;
		double doctor = 0.0;
		double ceo = 0.0;
		double criminal = 0.0;
		double homeless = 0.0;
		double unemployed = 0.0;
		double unknownPro = 0.0;
		double pregnant = 0.0;
		double person = 0.0;
		double animal = 0.0;
		double dog = 0.0;
		double cat = 0.0;
		double bird = 0.0;
		double pets = 0.0;
		double you = 0.0;
		double ferret = 0.0;
		double red = 0.0;
		double green = 0.0;
		double ages = 0.0;
		double sum = 0;
		
		double[] count = new double[26];
		for (int i = 0; i < count.length; i++)
			count[i] = 0.0;
		/*
		 * Traverse each scene
		 */
		for (int j = 0; j < saves.size(); j++) {
			
			

			Character[] passenger = list.get(j).getPassengers();
			Character[] pedestrian = list.get(j).getPedestrians();
			// Count the number of occurrences of each attribute
			double[] temp = countValue(list.get(j), passenger, pedestrian);
			for (int m = 0; m < count.length; m++) {
				count[m] = count[m] + temp[m];
			}

			if (saves.get(j).contentEquals("passengers")) {
				// It was the passengers who survived
				sum = sum + passenger.length;
				if (list.get(j).isLegalCrossing() == true) {
					green = green + passenger.length;
				} else
					red = red + passenger.length;
				for (int i = 0; i < passenger.length; i++) {
					try {
						if (passenger[i].getClass() == Person.class) {
							// It's a person
							person = person + 1;
							ages = ages + passenger[i].getAge();
							if (((Person) passenger[i]).isYou() == true)
								you = you + 1;

							/*
							 * Count the number of occurrences of each attribute of survivors
							 */
							switch (((Person) passenger[i]).getAgeCategory()) {
							case BABY:
								baby = baby + 1;
								break;
							case CHILD:
								child = child + 1;
								break;
							case ADULT:
								adult = adult + 1;
								break;
							case SENIOR:
								senior = senior + 1;
								break;
							default:
								break;
							}
							switch (((Person) passenger[i]).getGender()) {
							case FEMALE:
								female=female+1;
								break;
							case MALE:
								male=male+1;
								break;
							default:
								break;
							}
							switch (((Person)passenger[i]).getBodyType()) {
							case AVERAGE:
								average=average+1;
								break;
							case ATHLETIC:
								athletic= athletic+1;
								break;
							case OVERWEIGHT:
								overweight=overweight+1;
								break;
							default:
								break;
							}
							switch (((Person) passenger[i]).getProfession()) {
							case DOCTOR:
								doctor=doctor+1;
								break;
							case CEO:
								ceo=ceo+1;
								break;
							case CRIMINAL:
								criminal=criminal+1;
								break;
							case HOMELESS:
								homeless=homeless+1;
								break;
							case UNEMPLOYED:
								unemployed=unemployed+1;
								break;
							case UNKNOWN:
								unknownPro=unknownPro+1;
								break;
							default:
								break;
							}
							if (((Person) passenger[i]).isPregnant())
								pregnant=pregnant+1;

						}
					} catch (NullPointerException e) {
					}
					try {
						if (passenger[i].getClass() == Animal.class) {
							// It's an animal
							animal=animal+1;
							if (((Animal) passenger[i]).isPet())
								pets=pets+1;
							switch (((Animal) passenger[i]).getSpecies()) {
							case "dog":
								dog=dog+1;
								break;
							case "cat":
								cat=cat+1;
								break;
							case "bird":
								bird=bird+1;
								break;
							case "ferret":
								ferret=ferret+1;
								break;
							default:
								break;
							}
						}
					} catch (NullPointerException e) {
					}
				}
			} else {
				// Pedestrians survive
				if (list.get(j).isLegalCrossing() == true) {
					green = green + pedestrian.length;
				} else
					red = red + pedestrian.length;
				sum = sum + pedestrian.length;
				for (int i = 0; i < pedestrian.length; i++) {
					try {
						if (pedestrian[i].getClass() == Person.class) {
							person = person + 1;
							ages = ages + pedestrian[i].getAge();
							if (((Person) pedestrian[i]).isYou() == true)
								you = you + 1;

							/*
							 * Count the number of occurrences of each attribute of survivors
							 */
							switch (((Person) pedestrian[i]).getAgeCategory()) {
							case BABY:
								baby = baby + 1;
								break;
							case CHILD:
								child = child + 1;
								break;
							case ADULT:
								adult = adult + 1;
								break;
							case SENIOR:
								senior = senior + 1;
								break;
							default:
								break;
							}
							switch (((Person) pedestrian[i]).getGender()) {
							case FEMALE:
								female=female+1;
								break;
							case MALE:
								male=male+1;
								break;
							default:
								break;
							}
							switch (((Person) pedestrian[i]).getBodyType()) {
							case AVERAGE:
								average=average+1;
								break;
							case ATHLETIC:
								athletic= athletic+1;
								break;
							case OVERWEIGHT:
								overweight=overweight+1;
								break;
							default:
								break;
							}
							switch (((Person) pedestrian[i]).getProfession()) {
							case DOCTOR:
								doctor=doctor+1;
								break;
							case CEO:
								ceo=ceo+1;
								break;
							case CRIMINAL:
								criminal=criminal+1;
								break;
							case HOMELESS:
								homeless=homeless+1;
								break;
							case UNEMPLOYED:
								unemployed=unemployed+1;
								break;
							case UNKNOWN:
								unknownPro=unknownPro+1;
								break;
							default:
								break;
							}
							if (((Person) pedestrian[i]).isPregnant())
								pregnant=pregnant+1;

						}
					} catch (NullPointerException e) {
					}
					try {
						if (pedestrian[i].getClass() == Animal.class) {
							// It's an animal
							animal=animal+1;
							if (((Animal) pedestrian[i]).isPet())
								pets=pets+1;
							switch (((Animal) pedestrian[i]).getSpecies()) {
							case "dog":
								dog=dog+1;
								break;
							case "cat":
								cat=cat+1;
								break;
							case "bird":
								bird=bird+1;
								break;
							case "ferret":
								ferret=ferret+1;
								break;
							default:
								break;
							}
						}
					} catch (NullPointerException e) {
					}
				}
			}
		}

		/*
		 * After traversing each scene, calculate the probability and put it into the
		 * map
		 */
		this.averageAge = ages / person;
		if (count[0] == 0.0)
			map.put("baby", (double) 0);
		else
			map.put("baby", baby / count[0]);

		if (count[1] == 0.0)
			map.put("child", (double) 0);
		else
			map.put("child", child / count[1]);

		if (count[2] == 0.0)
			map.put("adult", (double) 0);
		else
			map.put("adult", adult / count[2]);

		if (count[3] == 0.0)
			map.put("senior", (double) 0);
		else
			map.put("senior", senior / count[3]);

		if (count[4] == 0.0)
			map.put("female", (double) 0);
		else
			map.put("female", female / count[4]);

		if (count[5] == 0.0)
			map.put("male", (double) 0);
		else
			map.put("male", male / count[5]);

		if (count[6] == 0.0)
			map.put("average", (double) 0);
		else
			map.put("average", average / count[6]);

		if (count[7] == 0.0)
			map.put("athletic", (double) 0);
		else
			map.put("athletic", athletic / count[7]);

		if (count[8] == 0.0)
			map.put("overweight", (double) 0);
		else
			map.put("overweight", overweight / count[8]);

		if (count[9] == 0.0)
			map.put("doctor", (double) 0);
		else
			map.put("doctor", doctor / count[9]);

		if (count[10] == 0.0)
			map.put("ceo", (double) 0);
		else
			map.put("ceo", ceo / count[10]);

		if (count[11] == 0.0)
			map.put("criminal", (double) 0);
		else
			map.put("criminal", criminal / count[11]);

		if (count[12] == 0.0)
			map.put("homeless", (double) 0);
		else
			map.put("homeless", homeless / count[12]);

		if (count[13] == 0.0)
			map.put("unemployed", (double) 0);
		else
			map.put("unemployed", unemployed / count[13]);

		if (count[14] == 0.0)
			map.put("unknown", (double) 0);
		else
			map.put("unknown", unknownPro / count[14]);

		if (count[15] == 0.0)
			map.put("pregnant", (double) 0);
		else
			map.put("pregnant", pregnant / count[15]);

		if (count[16] == 0.0)
			map.put("person", (double) 0);
		else
			map.put("person", person / count[16]);

		if (count[17] == 0.0)
			map.put("animal", (double) 0);
		else
			map.put("animal", animal / count[17]);

		if (count[18] == 0.0)
			map.put("dog", (double) 0);
		else
			map.put("dog", dog / count[18]);

		if (count[19] == 0.0)
			map.put("cat", (double) 0);
		else
			map.put("cat", cat / count[19]);

		if (count[20] == 0.0)
			map.put("bird", (double) 0);
		else
			map.put("bird", bird / count[20]);

		if (count[21] == 0.0)
			map.put("pet", (double) 0);
		else
			map.put("pet", pets / count[21]);
		
		if (count[22] == 0.0)
			map.put("you", (double) 0);
		else
			map.put("you", you / count[22]);
	
		
		if (count[23] == 0.0)
			map.put("ferret", (double) 0);
		else
			map.put("ferret", ferret / count[23]);

		if (count[24] == 0.0)
			map.put("red", (double) 0);
		else
			map.put("red", red / count[24]);

		if (count[25] == 0.0)
			map.put("green", (double) 0);
		else
			map.put("green", green / count[25]);

		return map;
	}

	/**
	 * Statistics in each scene
	 * Count each value of objects in the scene
	 * Index of array is same as survivors' array 
	 * @param sc {@code Scenario} is a scenario
	 * @param passenger {@code Character[]} is an array of passengers
	 * @param pedestrian {@code Character[]} is an array of pedestrians
	 * @return {@code double[]}
	 */
	public double[] countValue(Scenario sc, Character[] passenger, Character[] pedestrian) {
		double[] count = new double[26];
		double[] pas, ped;
		count[24] = 0.0;					// Red light
		count[25] = 0.0;					// Green light

		pas = check(passenger);
		ped = check(pedestrian);
		for (int m = 0; m < count.length - 2; m++) {
			count[m] = pas[m] + ped[m];
		}
		if (sc.isLegalCrossing() == true)
			count[25] = passenger.length + pedestrian.length;
		if (sc.isLegalCrossing() == false)
			count[24] = passenger.length + pedestrian.length;

		return count;
	}

	/**
	 * Count the number of objects with certain attributes in the scene
	 *
	 * @param p {@code Character[]} is an array
	 * @return {@code double[]} stores the number of objects' attributes
	 */
	public double[] check(Character[] p) {
		double[] count = new double[24];
		for (int m = 0; m < count.length; m++)
			count[m] = 0.0;
		for (int i = 0; i < p.length; i++) {
			try {
				if (p[i].getClass() == Person.class) {
					count[16]++;
					switch (((Person) p[i]).getAgeCategory()) {
					case BABY:
						count[0]=count[0]+1;
						break;
					case CHILD:
						count[1]=count[1]+1;
						break;
					case ADULT:
						count[2]=count[2]+1;
						break;
					case SENIOR:
						count[3]=count[3]+1;
						break;
					default:
						break;
					}
					switch (((Person) p[i]).getGender()) {
					case FEMALE:
						count[4]=count[4]+1;
						break;
					case MALE:
						count[5]=count[5]+1;
						break;
					default:
						break;
					}
					switch (((Person) p[i]).getBodyType()) {
					case AVERAGE:
						count[6]=count[6]+1;
						break;
					case ATHLETIC:
						count[7]=count[7]+1;
						break;
					case OVERWEIGHT:
						count[8]=count[8]+1;
						break;
					default:
						break;
					}
					switch (((Person) p[i]).getProfession()) {
					case DOCTOR:
						count[9]=count[9]+1;
						break;
					case CEO:
						count[10]=count[10]+1;
						break;
					case CRIMINAL:
						count[11]=count[11]+1;
						break;
					case HOMELESS:
						count[12]=count[12]+1;
						break;
					case UNEMPLOYED:
						count[13]=count[13]+1;
						break;
					case UNKNOWN:
						count[14]=count[14]+1;
						break;
					default:
						break;
					}
					if (((Person) p[i]).isPregnant())
						count[15]=count[15]+1;
					if (((Person) p[i]).isYou())
						count[22]=count[22]+1;
				}
			} catch (NullPointerException e) {
			}
			try {
				if (p[i].getClass() == Animal.class) {
					count[17]=count[17]+1;
					if (((Animal) p[i]).isPet())
						count[21]=count[21]+1;
					switch (((Animal) p[i]).getSpecies()) {
					case "dog":
						count[18]=count[18]+1;
						break;
					case "cat":
						count[19]=count[19]+1;
						break;
					case "bird":
						count[20]=count[20]+1;
						break;
					case "ferret":
						count[23]=count[23]+1;
						break;
					default:
						break;
					}
				}
			} catch (NullPointerException e) {
			}

		}
		return count;
	}
}
============================================
src/Animal.java
19:13:49_Tuesday_30_June_2020
============================================
/** 
 * name: Yuqing Chang
 * student number: 1044862
 * username: yuqchang
 */
package ethicalengine;

/**
 * Subclasses of the Character class, defining variables of animals
 * @author Yuqing Chang
 *
 */
public class Animal extends Character {
	private String species;
	private boolean isPet;
	private boolean isPregnant;

	/**
	 * Constructor of Animal class
	 */
	public Animal() {
		super();
		this.species = null;
	}

	/**
	 * Constructor of Animal class
	 * @param species {@code String} is the species of an animal
	 */
	public Animal(String species) {
		super();
		this.species = species;
	}

	/**
	 * Constructor of Animal class
	 * @param otherAnimal {@code Animal} is an object of Animal class
	 */
	public Animal(Animal otherAnimal) {
		super(otherAnimal);
		this.species = otherAnimal.species;
	}

	/**
	 * Get species of an animal
	 * @return{@code String} is the species of an animal
	 */
	public String getSpecies() {
		return this.species;
	}

	/**
	 * Set species of an animal
	 * @param species {@code String} is the species of an animal
	 */
	public void setSpecies(String species) {
		this.species = species;
	}

	/**
	 * Set an animal whether it is a pet
	 * @param pet {@code boolean} is {@code true} if an animal is a pet 
	 */
	public void setPet(boolean pet) {
		this.isPet = pet;
	}

	/**
	 * Get an animal whether it is a pet
	 * @return {@code boolean} is {@code true} if an animal is a pet
	 */
	public boolean isPet() {
		return isPet;
	}

	/**
	 * Set information about whether the animal is pregnant
	 * @param isPregnant {@code boolean} is {@code true} if an animal is a pet
	 */
	public void setPregnant(boolean isPregnant) {
		if (this.getGender() != Gender.FEMALE) {
			this.isPregnant = false;
		} else
			this.isPregnant = isPregnant;
	}

	/**
	 * Organize animal information into a string and return
	 * @return {@code String} to store animal information
	 */
	public String toString() {
		String out;
		if (this.isPet == false) {
			out = this.species.toLowerCase();
		} else {
			out = this.species.toLowerCase() + " is pet";
		}
		return out;
	}
}
============================================
src/EthicalEngine.java
19:13:49_Tuesday_30_June_2020
============================================
/** 
 * name: Yuqing Chang
 * student number: 1044862
 * username: yuqchang
 */
import java.io.*;
import java.util.*;
import ethicalengine.*;
import ethicalengine.Character;
import ethicalengine.Character.BodyType;
import ethicalengine.Character.Gender;
import ethicalengine.Person.Profession;

/**
 * Including the main method and the method of determining the survivor
 * @author Yuqing Chang
 *
 */
public class EthicalEngine {
	public static Scanner scan = new Scanner(System.in);

	public enum Decision {PEDESTRIANS, PASSENGERS};

	private final static int MAX = 120;		// Maximum number of scenes Read from file
	private final static int GREEN = 1;		// Crossing the street legally
	private final static int RED = 2;		// Illegal crossing the road
	// Save scenes starting from 1, the corresponding index is passengers and
	// pedestrians in the same scene
	private static ArrayList[] passenger = new ArrayList[MAX];
	private static ArrayList[] pedestrian = new ArrayList[MAX];
	private static int[] color = new int[MAX];// green 1 red 2
	private static Scenario[] scens = null;
	public static boolean consent = false;;
	public static String outputPath = null;

	/**
	 * Main method
	 * @param args
	 * @throws IOException when can't find files
	 */
	public static void main(String[] args) throws IOException {
		// a welcome message
		String welcomePath = "welcome.ascii";
		File welcome = new File(welcomePath);
		if (welcome.exists()) {
			FileReader input = null;
			BufferedReader reader = null;
			try {
				input = new FileReader(welcome);
				reader = new BufferedReader(input);
				String line = null;
				// Read line by line
				while ((line = reader.readLine()) != null) {
					System.out.println(line);
				}
			} catch (Exception e) {
				e.printStackTrace();
			} finally {
				if (null != reader) {
					try {
						reader.close();
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
				if (null != input) {
					try {
						input.close();
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
			}
		}
		while (true) {
			System.out.println("Do you consent to have your decisions saved to a file? (yes/no)");
			String answer = scan.nextLine();
			try {
				if (answer.contentEquals("yes")) {
					consent = true;
					break;
				} else if (answer.contentEquals("no")) {
					consent = false;
					break;
				} else
					throw new InvalidInputException();
			} catch (InvalidInputException e) {
				System.out.print("Invalid response.");
				continue;
			}

		}
		
		/**
		 * Parsing command line parameters
		 */
		try {
			String command = args[0];
			if (command == null) {
				random();
			}
			
			/*
			 * Interaction model
			 */
			if (command.contentEquals("--interactive") || command.contentEquals("-i")) {
				boolean has = false;
				int index = 0;
				if (args.length > 1) {
					// Command contains -i and -c
					for (int i = 0; i < args.length; i++) {
						if (args[i].contentEquals("-c")) {
							has = true;
							index = i;
						}
					}
					if (has == true) {
						// Judge the index of "-c"
						if (index == 1) {
							// Record whether the user wants to continue
							boolean conti = true;
							File fil = new File(args[2]);
							readFile(fil, args[2]);
							Audit aud = new Audit(scens);
							aud.setAuditType("User");
							/*
							 * Judge whether still has remaining scenes
							 */
							while (conti == true) {
								boolean remain = aud.runUser();
								aud.printStatistic();
								if (remain == false) {
									System.out.println("That's all. Press Enter to quit.");
									if (scan.nextLine().contains("")) {
										conti = false;
										exit();
									}
								}
								System.out.println("Would you like to continue? (yes/no)");
								String inputs = scan.nextLine();
								try {
									if (inputs.contentEquals("no")) {
										conti = false;
										exit();
									}
									if (inputs.contentEquals("yes")) {
										conti = true;
									} else
										throw new InvalidInputException();
								} catch (InvalidInputException e) {
									System.out.println("Invalid response.");
									continue;
								}
							}
						} else if (index == 2) {
							// Record whether the user wants to continue
							boolean conti = true;
							File fil = new File(args[1]);
							readFile(fil, args[1]);
							Audit aud = new Audit(scens);
							aud.setAuditType("User");
							/*
							 * Judge whether still has remaining scenes
							 */
							while (conti == true) {
								boolean remain = aud.runUser();
								aud.printStatistic();
								if (remain == false) {
									System.out.println("That's all. Press Enter to quit.");
									if (scan.nextLine().contains("")) {
										conti = false;
										exit();
									}
								}
								System.out.println("Would you like to continue? (yes/no)");
								String inputs = scan.nextLine();
								try {
									if (inputs.contentEquals("no")) {
										conti = false;
										exit();
									}
									if (inputs.contentEquals("yes")) {
										conti = true;
									} else
										throw new InvalidInputException();
								} catch (InvalidInputException e) {
									System.out.println("Invalid response.");
									continue;
								}
							}
						}
					}
				}
				// There's only "-i" in command, so we should randomly generate scenes
				if (args.length == 1)
					random();
			}
			
			/*
			 * Help mode
			 */
			if ((command.contentEquals("--help")) || (command.contentEquals("-h"))
					|| (command.contentEquals("--config") && args[1] == null)) {
				help();
			}
			
			/*
			 * Read scene data from file
			 */
			if (command.contentEquals("--config") || command.contentEquals("-c")) {
				if (args.length == 1)
					help();
				else {
					// check whether the file is located at the specified location
					File fil = new File(args[1]);
					readFile(fil, args[1]);
					Audit aud = new Audit(scens);
					aud.setAuditType("Algorithm");
					aud.run();
					aud.printStatistic();
				}
				
			}
			
			/*
			 * Change the path to save the file
			 */
			if (command.contentEquals("--results") || command.contentEquals("-r")) {
				if (args.length > 1)
					outputPath = args[1];
				else {
					System.out.println("ERROR: could not print results. Target directory does not exist.");
					exit();
				}
			}
		} catch (FileNotFoundException e1) {
			// TODO Auto-generated catch block
			System.out.println("ERROR: could not find config file.");
		}
	}
	
	/**
	 * Show the help information
	 */
	public static void help() {
		String out = "EthicalEngine - COMP90041 - Final Project\n\n";
		out = out + "Usage: java EthicalEngine [arguments]\n\n";
		out = out + "Arguments:\n" + "  -c or --config Optional: path to config file\n";
		out = out + "  -h or --help Print Help (this message) and exit\n";
		out = out + "  -r or --results Optional: path to results log file\n";
		out = out + "  -i or --interactive Optional: launches interactive mode\n";
		System.out.print(out);
	}

	/**
	 * Choose whom to save for any scenario
	 * @param scenario{@code scenario} is a scenario
	 * @return {@code Decision} is the outcome of saving
	 */
	public static Decision decide(Scenario scenario) {
		/* First determine whether the pedestrian is crossing the road legally
		 * If one side is full of animals, then the other side is alive
		 * If there are animals on both sides, a large number of survivors (compare the number)
		 * If there are people on both sides, compare the age of the people
		 * First prepare the information in the scene
		 */
		Character[] passenger = scenario.getPassengers();
		Character[] pedestrian = scenario.getPedestrians();
		boolean isLegal = scenario.isLegalCrossing();

		int passengers = passenger.length;
		int pedestrians = pedestrian.length;
		int[] count = count(passenger);
		int[] count2 = count(pedestrian);
		/* Statistics derived information pedestrians. Count number of passengers in total +
		 * people + the elderly / infants / pregnant women /children
		 */

		if (isLegal == true) {
			if (count[2] != 0 || count[3] != 0 || count[4] != 0 || count[5] != 0) {
				if (count2[2] != 0 || count2[3] != 0 || count2[4] != 0 || count2[5] != 0) {
					// There are special people in the car and pedestrians
					if (passengers < pedestrians)
						return Decision.PEDESTRIANS;
					// There are many people in the car, or as many people
					else if (count[5] < count2[5]) {
						return Decision.PEDESTRIANS;
					} else if ((count[2] < count2[2]) || (count[3] < count2[3])) {
						return Decision.PEDESTRIANS;
					} else if (count[4] < count2[4])
						return Decision.PEDESTRIANS;
					else
						return Decision.PASSENGERS;
				} else {// Pedestrian without special person
					return Decision.PASSENGERS;
				}
			}
			// There are no special people in the car
			return Decision.PEDESTRIANS;
		} else {
			if (count2[2] != 0 || count2[3] != 0 || count2[4] != 0 || count2[5] != 0) {
				if (count[2] != 0 || count[3] != 0 || count[4] != 0 || count[5] != 0) {
					if (passengers < pedestrians)
						return Decision.PEDESTRIANS;
					else {
						if (count[5] < count2[5]) {
							return Decision.PEDESTRIANS;
						} else if ((count[2] < count2[2]) || (count2[3] < count[3])) {
							return Decision.PEDESTRIANS;
						} else if (count[4] < count2[4])
							return Decision.PEDESTRIANS;
						else
							return Decision.PASSENGERS;
					}
				} else
					return Decision.PEDESTRIANS;
			} else {
				if (count[2] != 0 || count[3] != 0 || count[4] != 0 || count[5] != 0) {
					return Decision.PASSENGERS;
				} else {// There are no special people in the car
					if (passengers < pedestrians)
						return Decision.PEDESTRIANS;
					else
						return Decision.PASSENGERS;
				}
			}
		}
	}

	/**
	 * Generate scenes randomly
	 * 
	 * @throws IOException when can't find file
	 */
	public static void random() throws IOException {
		// Record whether the user wants to continue
		boolean conti = true;
		Audit au = new Audit();
		au.setAuditType("User");
		
		/*
		 * Judge whether still has remaining scenes
		 */
		while (conti == true) {
			boolean remain = au.runUser(10);
			au.printStatistic();
			if (remain == false) {
				System.out.println("That's all. Press Enter to quit.");
				if (scan.nextLine().contains("")) {
					conti = false;
					exit();
				}
			}
			System.out.println("Would you like to continue? (yes/no)");
			String inputs = scan.nextLine();
			try {
				if (inputs.contentEquals("no")) {
					conti = false;
					exit();
				}
				if (inputs.contentEquals("yes")) {
					conti = true;
				} else
					throw new InvalidInputException();
			} catch (InvalidInputException e) {
				System.out.println("Invalid response.");
				continue;
			}
		}
	}

	/**
	 * Read from a file
	 * 
	 * @param fil {@code File} a file 
	 * @param path {@code String} is path of file
	 * @throws FileNotFoundException when can't find file
	 */
	public static void readFile(File fil, String path) throws FileNotFoundException {
		// Create EnumSet for each enum object
		EnumSet<Profession> profession = EnumSet.range(Profession.DOCTOR, Profession.UNKNOWN);
		EnumSet<Gender> gender = EnumSet.range(Gender.FEMALE, Gender.UNKNOWN);
		EnumSet<BodyType> body = EnumSet.range(BodyType.AVERAGE, BodyType.UNSPECIFIED);
		
		/*
		 * Read from file
		 */
		if (fil.exists()) {
			BufferedReader csvReader = new BufferedReader(new FileReader(path));
			String row;
			int iteration = 0;					// Identify index of different scenes in the array
			int lines = 0;						// The number of current lines
			// Store pedestrians and passengers in each scene
			ArrayList<Character> pas = null;
			ArrayList<Character> ped = null;

			try {
				while ((row = csvReader.readLine()) != null) {
					// Skip the header of the first line of the file
					if (lines == 0) {
						lines++;
						continue;
					}

					String[] data = row.split(",");
					/*
					 * Determine whether it is the beginning of a new scene
					 */
					if (data[0].contentEquals("scenario:green")) {
						iteration = iteration + 1;
						// Record the traffic lights of the current scene
						color[iteration] = GREEN;
						// Update the ArrayList every new scene
						pas = new ArrayList<Character>();
						ped = new ArrayList<Character>();
						lines++;
						continue;
					} else if (data[0].contentEquals("scenario:red")) {
						iteration = iteration + 1;
						// Record the traffic lights of the current scene
						color[iteration] = RED;
						// Update the ArrayList every new scene
						pas = new ArrayList<Character>();
						ped = new ArrayList<Character>();
						lines++;
						continue;
					}
					
					/*
					 * Invalid data format in config file in line
					 */
					try {
						if (data.length != 10) {
							throw new InvalidDataFormatException();
						}
					} catch (InvalidDataFormatException e) {
						System.out.println("WARNING: invalid data format in config file in line " + lines);
						lines++;
						continue;
					}
					
					/**
					 * Green light
					 */
					if (color[iteration] == GREEN) {
						/*
						 * It's a person, store the information
						 */
						if (data[0].contentEquals("person")) {
							Profession pro;
							Gender ge;
							BodyType bo;
							Object a = data[2];
							int age;
							
							/*
							 * Handle exception of each data and read data
							 */
							try {
								if (data[4] != null && profession.contains(Profession.valueOf(data[4].toUpperCase())))
									pro = Profession.valueOf(data[4].toUpperCase());
								else if (data[4].contentEquals("none"))
									pro = Profession.NONE;
								else
									throw new InvalidCharacteristicException(lines + 1);
							} catch (InvalidCharacteristicException e) {
								pro = Profession.UNKNOWN;
							} catch (IllegalArgumentException e2) {
								pro = Profession.UNKNOWN;
							}

							try {
								if (data[1] != null && gender.contains(Gender.valueOf(data[1].toUpperCase())))
									ge = Gender.valueOf(data[1].toUpperCase());
								else
									throw new InvalidCharacteristicException(lines + 1);

							} catch (InvalidCharacteristicException e) {
								ge = Gender.UNKNOWN;
							} catch (IllegalArgumentException e2) {
								ge = Gender.UNKNOWN;
							}
							try {
								if (data[3] != null && body.contains(BodyType.valueOf(data[3].toUpperCase())))
									bo = BodyType.valueOf(data[3].toUpperCase());
								else
									throw new InvalidCharacteristicException(lines + 1);
							} catch (InvalidCharacteristicException e) {
								bo = BodyType.UNSPECIFIED;
							} catch (IllegalArgumentException e2) {
								bo = BodyType.UNSPECIFIED;
							}
							boolean pre, you;
							if (data[5].contentEquals("TRUE") || data[5].contentEquals("true"))
								pre = true;
							else
								pre = false;

							try {
								if (data[2] != null)
									age = Integer.parseInt(data[2]);
								else
									throw new NumberFormatException();
							} catch (NumberFormatException e) {
								System.out.println("WARNING: invalid number format in config file in line " + lines);
								age = 0;
							}
							Person p = new Person(age, pro, ge, bo, pre);
							if (data[6].contentEquals("TRUE") || data[6].contentEquals("true"))
								you = true;
							else
								you = false;
							p.setAsYou(you);
							
							// Add this object to the list
							if (data[9].contentEquals("passenger"))
								pas.add(p);
							else
								ped.add(p);
						}
						
						// It's an animal, store the information of each attribute
						if (data[0].contentEquals("animal")) {
							Object a = data[2];
							int age;
							Gender ge;
							BodyType bo;
							
							/*
							 * Handle exception of each data and read data
							 */
							try {
								if (data[2] != null)
									age = Integer.parseInt(data[2]);
								else
									throw new NumberFormatException();
							} catch (NumberFormatException e) {
								System.out.println("WARNING: invalid number format inconfig file in line " + lines + 1);
								age = 0;
							}
							Animal an = new Animal(data[7]);
							try {
								if (data[1] != null && gender.contains(Gender.valueOf(data[1].toUpperCase())))
									ge = Gender.valueOf(data[1].toUpperCase());
								else
									throw new InvalidCharacteristicException(lines + 1);

							} catch (InvalidCharacteristicException e) {
								ge = Gender.UNKNOWN;
							} catch (IllegalArgumentException e2) {
								ge = Gender.UNKNOWN;
							}
							try {
								if (data[3] != null && body.contains(BodyType.valueOf(data[3].toUpperCase().trim())))
									bo = BodyType.valueOf(data[3].toUpperCase());
								else
									throw new InvalidCharacteristicException(lines + 1);
							} catch (InvalidCharacteristicException e) {
								bo = BodyType.UNSPECIFIED;
							} catch (IllegalArgumentException e2) {
								bo = BodyType.UNSPECIFIED;
							}
							boolean pre, isPet;
							if (data[5].contentEquals("TRUE") || data[5].contentEquals("true"))
								pre = true;
							else
								pre = false;
							if (data[8].contentEquals("TRUE") || data[8].contentEquals("true"))
								isPet = true;
							else
								isPet = false;
							an.setAge(age);
							an.setBodyType(bo);
							an.setGender(ge);
							an.setPregnant(pre);
							an.setPet(isPet);
							
							// Add this object to the list
							if (data[9].contentEquals("passenger"))
								pas.add(an);
							else
								ped.add(an);
						}

					}
					
					/**
					 * Red light
					 */
					if (color[iteration] == RED) {

						if (data[0].contentEquals("person")) {
							Profession pro = null;
							Gender ge = null;
							BodyType bo = null;
							
							/*
							 * Handle exception of each data
							 */
							try {
								if (data[4] != null && profession.contains(Profession.valueOf(data[4].toUpperCase())))
									pro = Profession.valueOf(data[4].toUpperCase());
								else if (data[4].contentEquals("none"))
									pro = Profession.NONE;
								else
									throw new InvalidCharacteristicException(lines + 1);
							} catch (InvalidCharacteristicException e) {
								pro = Profession.UNKNOWN;
							} catch (IllegalArgumentException e2) {
								pro = Profession.UNKNOWN;
							}

							try {
								if (data[1] != null && gender.contains(Gender.valueOf(data[1].toUpperCase())))
									ge = Gender.valueOf(data[1].toUpperCase());
								else
									throw new InvalidCharacteristicException(lines + 1);

							} catch (InvalidCharacteristicException e) {
								ge = Gender.UNKNOWN;
							} catch (IllegalArgumentException e2) {
								ge = Gender.UNKNOWN;
							}
							try {
								if (data[3] != null && body.contains(BodyType.valueOf(data[3].toUpperCase())))
									bo = BodyType.valueOf(data[3].toUpperCase());
								else
									throw new InvalidCharacteristicException(lines + 1);
							} catch (InvalidCharacteristicException e) {
								bo = BodyType.UNSPECIFIED;
							} catch (IllegalArgumentException e2) {
								bo = BodyType.UNSPECIFIED;
							}

							boolean pre, you;
							if (data[5].contentEquals("TRUE") || data[5].contentEquals("true"))
								pre = true;
							else
								pre = false;
							int age;
							try {
								if (data[2] != null)
									age = Integer.parseInt(data[2]);
								else
									throw new NumberFormatException();
							} catch (NumberFormatException e) {
								System.out.println("WARNING: invalid number format inconfig file in line " + lines + 1);
								age = 0;
							}
							Person p = new Person(age, pro, ge, bo, pre);
							if (data[6].contentEquals("TRUE") || data[6].contentEquals("true"))
								you = true;
							else
								you = false;
							p.setAsYou(you);
							if (data[9].contentEquals("passenger"))
								pas.add(p);
							else
								ped.add(p);
						}
						if (data[0].contentEquals("animal")) {
							Object a = data[2];
							int age;
							Gender ge;
							BodyType bo;
							try {
								if (data[2] != null)
									age = Integer.parseInt(data[2]);
								else
									throw new NumberFormatException();
							} catch (NumberFormatException e) {
								System.out.println("WARNING: invalid number format inconfig file in line " + lines + 1);
								age = 0;
							}
							
							try {
								if (data[1] != null && gender.contains(Gender.valueOf(data[1].toUpperCase())))
									ge = Gender.valueOf(data[1].toUpperCase());
								else
									throw new InvalidCharacteristicException(lines + 1);

							} catch (InvalidCharacteristicException e) {
								ge = Gender.UNKNOWN;
							}
							try {
								if (data[3] != null && body.contains(BodyType.valueOf(data[3].toUpperCase())))
									bo = BodyType.valueOf(data[3].toUpperCase());
								else
									throw new InvalidCharacteristicException(lines + 1);
							} catch (InvalidCharacteristicException e) {
								bo = BodyType.UNSPECIFIED;
							} catch (IllegalArgumentException e2) {
								bo = BodyType.UNSPECIFIED;
							}
							boolean pre, isPet;
							if (data[5].contentEquals("TRUE") || data[5].contentEquals("true"))
								pre = true;
							else
								pre = false;
							if (data[8].contentEquals("TRUE") || data[8].contentEquals("true"))
								isPet = true;
							else
								isPet = false;
							Animal an = new Animal(data[7]);
							an.setAge(age);
							an.setBodyType(bo);
							an.setGender(ge);
							an.setPregnant(pre);
							an.setPet(isPet);
							
							// Add this object to the list
							if (data[9].contentEquals("passenger"))
								pas.add(an);
							else
								ped.add(an);
						}
					}
					
					// Store passengers and pedestrians in a scene in an array with the same index
					if (iteration != 0) {
						passenger[iteration] = pas;
						pedestrian[iteration] = ped;
					}
					lines++;
				}
				csvReader.close();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		} else {
			// no file
			throw new FileNotFoundException();
		}
		
		/*
		 * Count the number of real scenes
		 */
		int length = 0;
		for (int i = 0; i < passenger.length; i++) {
			if (passenger[i] != null) {
				length = length + 1;
			}
		}
		scens = new Scenario[length];
		
		boolean legal = false;
		for (int i = 1; i < length + 1; i++) {
			Character[] pa = new Character[passenger[i].size()];
			Character[] pe = new Character[pedestrian[i].size()];
			if (color[i] == GREEN)
				legal = true;
			if (color[i] == RED)
				legal = false;
			/*
			 * Install the passenger list into the passenger array
			 */
			for (int j = 0; j < pa.length; j++) {
				pa[j] = (Character) passenger[i].get(j);
			}

			/*
			 * Install the pedestrian list into the pedestrian array
			 */
			for (int m = 0; m < pe.length; m++) {
				pe[m] = (Character) pedestrian[i].get(m);
			}
			
			scens[i - 1] = new Scenario(pa, pe, legal);
		}
	}

	/**
	 * Count the number of objects with certain attributes in the scene
	 * Statistics the attributes that determine the survivor
	 * @param p {@code Character[]} is an array of characters
	 * @return {@code int[]} stores the number of each character
	 */
	public static int[] count(Character[] p) {
		// There are six attributes that affect the outcome of the survivor
		int[] count = new int[6];
		int person = 0;
		int animal = 0;
		int baby = 0;
		int child = 0;
		int senior = 0;
		int pregnant = 0;
		for (int i = 0; i < p.length; i++) {
			if (p[i].getClass() == Person.class) {
				person = person + 1;
				if (((Person) p[i]).getAgeCategory().toString().contentEquals("BABY"))
					baby = baby + 1;
				else if (((Person) p[i]).getAgeCategory().toString().contentEquals("CHILD"))
					child = child + 1;
				else if (((Person) p[i]).getAgeCategory().toString().contentEquals("SENIOR"))
					senior = senior + 1;

				if (((Person) p[i]).isPregnant() == true) {
					pregnant = pregnant + 1;
				}
			}
		}

		animal = p.length - person;
		count[0] = person;
		count[1] = animal;
		count[2] = baby;
		count[3] = child;
		count[4] = senior;
		count[5] = pregnant;
		return count;
	}

	/**
	 * Exit the program
	 */
	public static void exit() {
		System.exit(0);
	}
}
============================================
src/Character.java
19:13:49_Tuesday_30_June_2020
============================================
/** 
 * name: Yuqing Chang
 * student number: 1044862
 * username: yuqchang
 */
package ethicalengine;

/**
 * Abstract class
 * Define character basic attributes
 * @author Yuqing Chang
 *
 */
public abstract class Character {
	public enum Gender {FEMALE, MALE, UNKNOWN};

	public enum BodyType {AVERAGE, ATHLETIC, OVERWEIGHT, UNSPECIFIED};

	// Attributes of a Character object
	private int age;
	private Gender gender;
	private BodyType bodytype;

	/**
	 * Constructor of Character class
	 */
	public Character() {
		gender = Gender.UNKNOWN;
		bodytype = BodyType.UNSPECIFIED;
		age = 0;
	}

	/**
	 * Constructor of Character class
	 * @param age {@code int} is the age of a character
	 * @param gender {@code Gender} is the gender of a character
	 * @param bodytype{@code BodyType} is the body type of a character
	 */
	public Character(int age, Gender gender, BodyType bodytype) {
		if (age >= 0)
			this.age = age;
		else
			this.age = 0;
		this.gender = gender;
		this.bodytype = bodytype;
	}

	/**
	 * Constructor of Character class
	 * @param c {@code character} is an object of Character
	 */
	public Character(Character c) {
		if (c == null) {
			System.out.println("Error: null character.");
			System.exit(0);
		}
		gender = c.gender;
		bodytype = c.bodytype;
		if (c.age >= 0)
			age = c.age;
		else
			age = 0;
	}

	/**
	 * Get age of a character
	 * @return {@code int} is the age of a character
	 */
	public int getAge() {
		return this.age;
	}

	/**
	 * Get gender of a character
	 * @return {@code Gender} is the gender of a character
	 */
	public Gender getGender() {
		return this.gender;
	}

	/**
	 * Get body type of a character
	 * @return {@code BodyType} is the body type of a character
	 */
	public BodyType getBodyType() {
		return this.bodytype;
	}

	/**
	 * Set age of a character
	 * @param age {@code int} is the age of a character
	 */
	public void setAge(int age) {
		if (age >= 0)
			this.age = age;
		else
			this.age = 0;
	}

	/**
	 * Set gender of a character
	 * @param gender {@code Gender} is the gender of a character
	 */
	public void setGender(Gender gender) {
		this.gender = gender;
	}

	/**
	 * Set body type of a character
	 * @param bodytype {@code BodyType} is the body type of a character
	 */
	public void setBodyType(BodyType bodytype) {
		this.bodytype = bodytype;
	}
}
============================================
src/ethicalengine.txt
19:13:49_Tuesday_30_June_2020
============================================
Animal.java
Character.java
Person.java
Scenario.java
ScenarioGenerator.java
============================================
src/InvalidCharacteristicException.java
19:13:49_Tuesday_30_June_2020
============================================
/** 
 * name: Yuqing Chang
 * student number: 1044862
 * username: yuqchang
 */
/**
 * Customized exception class to handle invalid character exceptions
 * @author Yuqing Chang
 *
 */
public class InvalidCharacteristicException extends Exception {
	
	/**
	 * Constructor of InvalidCharacteristicException class
	 * @param s {@code int} is the number of rows in file
	 */
	public InvalidCharacteristicException(int s) {
		System.out.println("WARNING:  invalid characteristic in config file in line " + s);
	}

}
============================================
src/Person.java
19:13:49_Tuesday_30_June_2020
============================================
/** 
 * name: Yuqing Chang
 * student number: 1044862
 * username: yuqchang
 */
package ethicalengine;

import ethicalengine.Character.BodyType;
import ethicalengine.Character.Gender;
import ethicalengine.Person.Profession;

/**
 * Subclasses of the Character class, defining variables of human
 * @author Yuqing Chang
 *
 */
public class Person extends Character {
	// Enum objects
	public enum Profession {DOCTOR, CEO, CRIMINAL, HOMELESS, UNEMPLOYED, UNKNOWN, NONE};
	public enum AgeCategory {BABY, CHILD, ADULT, SENIOR};

	private Profession profession;			// Professions
	private boolean isPregnant;
	private boolean isYou;

	/**
	 * Constructor of Person class
	 */
	public Person() {
		super();
		this.profession = Profession.NONE;
		this.isPregnant = false;

	}

	/**
	 * Constructor of Person class
	 * @param age {@code int} is the age of a person
	 * @param profession {@code Profession} is the profession of a person
	 * @param gender {@code Gender} is the gender of a person
	 * @param bodytype{@code BodyType} is the body type of a person
	 * @param isPregnant {@code boolean} is {@code true} if a person is a pregnant
	 */
	public Person(int age, Profession profession, Gender gender, BodyType bodytype, boolean isPregnant) {
		super(age, gender, bodytype);
		/*
		 * Only adults have professions
		 */
		if (this.getAgeCategory() == AgeCategory.ADULT) {
			this.profession = profession;
		} else
			profession = Profession.NONE;
		if (gender != Gender.FEMALE) {
			this.isPregnant = false;
		} else
			this.isPregnant = isPregnant;
	}

	/**
	 * Constructor of Person class
	 * @param age {@code int} is the age of a person
	 * @param gender {@code Gender} is the gender of a person
	 * @param bodytype{@code BodyType} is the body type of a person
	 */
	public Person(int age, Gender gender, BodyType bodytype) {
		super(age, gender, bodytype);
		if (this.getAgeCategory() == AgeCategory.ADULT) {
			profession = Profession.UNKNOWN;
		} else
			profession = Profession.NONE;
		this.isPregnant = false;
	}

	/**
	 * Constructor of Person class
	 * @param otherPerson {@code Person} is the object of a person
	 */
	public Person(Person otherPerson) {
		super(otherPerson);
		if (otherPerson.getAge() >= 17 && otherPerson.getAge() <= 68) {
			this.profession = otherPerson.profession;
		} else
			this.profession = Profession.NONE;
		if (otherPerson.getGender() != Gender.FEMALE) {
			this.isPregnant = false;
		} else
			this.isPregnant = otherPerson.isPregnant;
	}

	/**
	 * Get age category of a person
	 * @return {@code AgeCategory} is the category of age
	 */
	public AgeCategory getAgeCategory() {
		int age = this.getAge();
		if (age <= 4) {
			return AgeCategory.BABY;
		} else if (age <= 16) {
			return AgeCategory.CHILD;
		} else if (age <= 68) {
			return AgeCategory.ADULT;
		} else {
			return AgeCategory.SENIOR;
		}
	}

	/**
	 * Get profession of a person
	 * @return {@code Profession} is the profession of a person
	 */
	public Profession getProfession() {
		if (this.getAgeCategory() == AgeCategory.ADULT) {
			return this.profession;
		} else
			return Profession.NONE;
	}

	/**
	 * Get information about whether the person is pregnant
	 * @return {@code boolean} is {@code true} if a person is a pregnant
	 */
	public boolean isPregnant() {
		if (this.getGender() != Gender.FEMALE) {
			return false;
		} else
			return this.isPregnant;
	}

	/**
	 * Set information about whether the person is pregnant
	 * @param pregnant {@code boolean} is {@code true} if a person is a pregnant
	 */
	public void setPregnant(boolean pregnant) {
		if (this.getGender() == Gender.FEMALE) {
			this.isPregnant = pregnant;
		} else
			this.isPregnant = false;
	}

	/**
	 * Get information about whether the person is you
	 * @return {@code boolean} is {@code true} if a person is you
	 */
	public boolean isYou() {
		return isYou;
	}

	/**
	 * Set information about whether the person is you
	 * @param isYou {@code boolean} is {@code true} if a person is you
	 */
	public void setAsYou(boolean isYou) {
		this.isYou = isYou;
	}

	@Override
	/**
	 * Organize person information into a string and return
	 * @author yuqchang
	 * @return {@code String} to store person information
	 */
	public String toString() {
		String body = this.getBodyType().toString().toLowerCase();
		String age = this.getAgeCategory().toString().toLowerCase();
		String gender = this.getGender().toString().toLowerCase();
		String out;
		if (this.isYou == false) {
			if (this.profession == null) {
				if (this.isPregnant == false) {

					out = body + " " + age + " " + gender;
				} else {
					String s = body + " " + age + " " + gender;
					out = s + " pregnant";
				}
			} else {
				String pro = this.profession.toString().toLowerCase();
				String s = body + " " + age + " " + pro + " " + gender;
				if (this.isPregnant == false) {
					out = s;
				} else {
					out = s + " pregnant";
				}
			}
		} else {
			if (this.profession == null) {
				String s = "you " + body + " " + age + " " + gender;
				if (this.isPregnant == false) {
					out = s;
				} else {
					out = s + " pregnant";
				}
			} else {
				String pro = this.profession.toString().toLowerCase();
				String s = "you " + body + " " + age + " " + pro + " " + gender;
				if (this.isPregnant == false) {
					out = s;
				} else {
					out = s + " pregnant";
				}
			}
		}
		return out;
	}

}
============================================
src/InvalidDataFormatException.java
19:13:49_Tuesday_30_June_2020
============================================
/** 
 * name: Yuqing Chang
 * student number: 1044862
 * username: yuqchang
 */
/**
 * Customized exception class to handle invalid data format exceptions
 * @author Yuqing Chang
 *
 */
public class InvalidDataFormatException extends Exception {

	/**
	 * Constructor of InvalidDataFormatException class
	 */
	public InvalidDataFormatException() {
		
	}
}
============================================
src/welcome.ascii
19:13:49_Tuesday_30_June_2020
============================================
                   __-------__
                 / _---------_ \
                / /           \ \
                | |           | |
                |_|___________|_|
            /-\|                 |/-\
           | _ |\       0       /| _ |
           |(_)| \      !      / |(_)|
           |___|__\_____!_____/__|___|
           [_______|COMP90041|_______] 
            ||||    ~~~~~~~~~    ||||
            `--'                 `--'

    $$\      $$\                              $$\                                
    $$$\    $$$ |                             $$ |                               
    $$$$\  $$$$ | $$$$$$\   $$$$$$\  $$$$$$\  $$ |                               
    $$\$$\$$ $$ |$$  __$$\ $$  __$$\ \____$$\ $$ |                               
    $$ \$$$  $$ |$$ /  $$ |$$ |  \__|$$$$$$$ |$$ |                               
    $$ |\$  /$$ |$$ |  $$ |$$ |     $$  __$$ |$$ |                               
    $$ | \_/ $$ |\$$$$$$  |$$ |     \$$$$$$$ |$$ |                               
    \__|     \__| \______/ \__|      \_______|\__|                               
    $$\      $$\                     $$\       $$\                               
    $$$\    $$$ |                    $$ |      \__|                              
    $$$$\  $$$$ | $$$$$$\   $$$$$$$\ $$$$$$$\  $$\ $$$$$$$\   $$$$$$\   $$$$$$$\ 
    $$\$$\$$ $$ | \____$$\ $$  _____|$$  __$$\ $$ |$$  __$$\ $$  __$$\ $$  _____|
    $$ \$$$  $$ | $$$$$$$ |$$ /      $$ |  $$ |$$ |$$ |  $$ |$$$$$$$$ |\$$$$$$\  
    $$ |\$  /$$ |$$  __$$ |$$ |      $$ |  $$ |$$ |$$ |  $$ |$$   ____| \____$$\ 
    $$ | \_/ $$ |\$$$$$$$ |\$$$$$$$\ $$ |  $$ |$$ |$$ |  $$ |\$$$$$$$\ $$$$$$$  |
    \__|     \__| \_______| \_______|\__|  \__|\__|\__|  \__| \_______|\_______/ 


Welcome to Moral Machines! 
    
The idea of Moral Machines is based on the Trolley Dilemma, a fictional scenario presenting a decision maker with a moral dilemma: choosing ”the lesser of two evils”. The scenario entails an autonomous car whose brakes fail at a pedestrian crossing. As it is too late to relinquish control to the car’s passengers, the car needs to make a decision. Now.

The answers are not straightforward. There are a number of variables at play, which influence how people may feel about the decision: the number of pedestrians or passengers, whether the pedestrians are crossing the street legally, and personal characteristics that our automomous car can somehow infer (people's body tye, profession, gender, age, etc.). This program is a thought experiment, which explores how decisions should be made by auditing algorithms and collecting user feedback. You, the user of this program, will be put into (im)possible situations, left to decide about life and death.